
import streamlit as st
import pandas as pd
from tri_risk_engine import generate_tri_summary
from connection_risk_engine import batch_connection_risk

# Set page layout
st.set_page_config(page_title="Total Risk Intelligence Command Centre", layout="wide")

st.title("üß† Total Risk Intelligence Command Centre")
st.markdown("Live risk synthesis for fuel, connections, weather, crew and disruption decisions.")

# --- Section 1: Live ADS-B Input Placeholder ---
st.header("üì° Live ADS-B Feed (Simulated Input)")

adsb_placeholder = {
    "flight_id": "VS3",
    "origin": "EGLL",
    "destination": "JFK",
    "current_position": [51.5, -30.0],
    "eta_utc": "2025-07-11T18:05:00Z",
    "ground_speed": 875
}
st.json(adsb_placeholder)

# --- Section 2: FlightAware ETA Placeholder ---
st.header("üõ¨ FlightAware ETA Prediction (Mocked)")
flightaware_eta = "2025-07-11T18:05:00Z"
st.success(f"ETA from FlightAware: {flightaware_eta}")

# --- Section 3: METAR/Weather Overlay ---
st.header("üå¶Ô∏è Destination METAR & Weather Risk (Simulated)")
metar_data = {
    "JFK": {
        "METAR": "KJFK 111751Z 23012KT 10SM FEW040 SCT100 29/17 A2992",
        "Wx Risk": "Low",
        "Ceiling": "Few at 4,000 ft",
        "Visibility": "10SM",
        "Temp": "29¬∞C"
    }
}
st.json(metar_data)

# --- Section 4: Connection Risk Assessment ---
st.header("üîó Connection Risk Assessment")
arrival_eta_str = flightaware_eta
connection_list = [
    {"connection_flight": "DL215", "connection_std": "2025-07-11T18:25:00Z", "pax_count": 9},
    {"connection_flight": "DL411", "connection_std": "2025-07-11T18:10:00Z", "pax_count": 6},
    {"connection_flight": "KL602", "connection_std": "2025-07-11T18:50:00Z", "pax_count": 3}
]
mct_minutes = 45
connection_risks = batch_connection_risk(arrival_eta_str, connection_list, mct_minutes)
connection_df = pd.DataFrame(connection_risks)
st.dataframe(connection_df, use_container_width=True)

# --- Section 5: TRI Summary ---
st.header("üß† TRI Summary for VS3")
total_pax_at_risk = sum([
    row["passengers_affected"]
    for row in connection_risks if row["risk_level"] in ("Missed", "Tight")
])

tri_result = generate_tri_summary(
    flight_id="VS3",
    discretionary_fuel=600,
    fuel_reduction_kg=400,
    pax_missed=total_pax_at_risk,
    time_to_duty_end_min=90,
    delay_min=20,
    diversion_risk_level="Low",
    diversion_distance_km=0
)
tri_df = pd.DataFrame([tri_result])
st.dataframe(tri_df, use_container_width=True)

# --- Section 6: Recommendation Summary ---
st.success(f"üß≠ AI Recommendation: {tri_result['recommendation']}")
