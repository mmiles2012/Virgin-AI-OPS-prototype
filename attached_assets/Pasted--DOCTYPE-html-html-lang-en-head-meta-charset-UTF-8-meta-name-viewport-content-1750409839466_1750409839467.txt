<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Satellite Map - Airport Navigator</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.css" />
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #1a1a1a;
            color: #fff;
            overflow: hidden;
        }

        .container {
            display: flex;
            height: 100vh;
        }

        .sidebar {
            width: 300px;
            background: linear-gradient(145deg, #2c2c2c, #1f1f1f);
            border-right: 1px solid #444;
            padding: 20px;
            overflow-y: auto;
            box-shadow: 2px 0 10px rgba(0,0,0,0.3);
        }

        .map-container {
            flex: 1;
            position: relative;
        }

        #map {
            height: 100%;
            width: 100%;
        }

        .controls {
            position: absolute;
            top: 20px;
            right: 20px;
            z-index: 1000;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .control-btn {
            background: rgba(42, 42, 42, 0.95);
            border: 1px solid #555;
            color: #fff;
            padding: 10px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .control-btn:hover {
            background: rgba(60, 60, 60, 0.95);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.4);
        }

        .search-container {
            margin-bottom: 20px;
        }

        .search-input {
            width: 100%;
            padding: 12px;
            background: rgba(255,255,255,0.1);
            border: 1px solid #555;
            border-radius: 8px;
            color: #fff;
            font-size: 14px;
        }

        .search-input::placeholder {
            color: #aaa;
        }

        .search-input:focus {
            outline: none;
            border-color: #4CAF50;
            box-shadow: 0 0 10px rgba(76, 175, 80, 0.3);
        }

        .airport-list {
            max-height: calc(100vh - 200px);
            overflow-y: auto;
        }

        .airport-item {
            background: rgba(255,255,255,0.05);
            border: 1px solid #444;
            border-radius: 8px;
            padding: 12px;
            margin-bottom: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .airport-item:hover {
            background: rgba(255,255,255,0.1);
            border-color: #4CAF50;
            transform: translateX(5px);
        }

        .airport-code {
            font-weight: bold;
            color: #4CAF50;
            font-size: 16px;
        }

        .airport-name {
            font-size: 14px;
            color: #ccc;
            margin-top: 4px;
        }

        .airport-location {
            font-size: 12px;
            color: #888;
            margin-top: 2px;
        }

        .title {
            color: #4CAF50;
            margin-bottom: 20px;
            font-size: 24px;
            font-weight: 300;
        }

        .coordinates {
            position: absolute;
            bottom: 20px;
            left: 20px;
            background: rgba(42, 42, 42, 0.95);
            padding: 8px 12px;
            border-radius: 6px;
            font-family: monospace;
            font-size: 12px;
            backdrop-filter: blur(10px);
            border: 1px solid #555;
        }

        .leaflet-popup-content-wrapper {
            background: #2c2c2c;
            color: #fff;
            border-radius: 8px;
        }

        .leaflet-popup-content {
            margin: 12px;
        }

        .leaflet-popup-tip {
            background: #2c2c2c;
        }

        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-track {
            background: #1a1a1a;
        }

        ::-webkit-scrollbar-thumb {
            background: #555;
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #777;
        }

        .weather-controls {
            position: relative;
        }

        .weather-panel {
            position: absolute;
            top: 0;
            right: 60px;
            background: rgba(42, 42, 42, 0.95);
            border: 1px solid #555;
            border-radius: 8px;
            padding: 15px;
            min-width: 200px;
            backdrop-filter: blur(10px);
            display: none;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
        }

        .weather-panel.active {
            display: block;
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateX(10px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        .weather-title {
            color: #4CAF50;
            font-weight: bold;
            margin-bottom: 10px;
            font-size: 14px;
        }

        .weather-options {
            margin-bottom: 15px;
        }

        .weather-option {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
            cursor: pointer;
            padding: 4px;
            border-radius: 4px;
            transition: background 0.2s ease;
        }

        .weather-option:hover {
            background: rgba(255,255,255,0.1);
        }

        .weather-option input[type="checkbox"] {
            margin-right: 8px;
            accent-color: #4CAF50;
        }

        .weather-option span {
            font-size: 13px;
            user-select: none;
        }

        .weather-opacity {
            border-top: 1px solid #555;
            padding-top: 10px;
        }

        .weather-opacity label {
            display: block;
            font-size: 12px;
            color: #ccc;
            margin-bottom: 5px;
        }

        .weather-opacity input[type="range"] {
            width: 100%;
            margin-bottom: 5px;
            accent-color: #4CAF50;
        }

        .weather-opacity span {
            font-size: 11px;
            color: #888;
        }

        .weather-btn.active {
            background: rgba(76, 175, 80, 0.3);
        }

        .weather-legend {
            position: absolute;
            bottom: 80px;
            left: 20px;
            background: rgba(42, 42, 42, 0.95);
            border: 1px solid #555;
            border-radius: 8px;
            padding: 10px;
            max-width: 250px;
            backdrop-filter: blur(10px);
            display: none;
            font-size: 12px;
        }

        .weather-legend.active {
            display: block;
        }

        .legend-title {
            color: #4CAF50;
            font-weight: bold;
            margin-bottom: 8px;
        }

        .legend-item {
            display: flex;
            align-items: center;
            margin-bottom: 4px;
        }

        .legend-color {
            width: 20px;
            height: 12px;
            margin-right: 8px;
            border-radius: 2px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="sidebar">
            <h1 class="title">Airport Navigator</h1>
            
            <div class="search-container">
                <input type="text" class="search-input" id="searchInput" placeholder="Search airports...">
            </div>
            
            <div class="airport-list" id="airportList"></div>
        </div>
        
        <div class="map-container">
            <div id="map"></div>
            
            <div class="controls">
                <button class="control-btn" id="homeBtn" title="Reset View">üè† Home</button>
                <button class="control-btn" id="satelliteBtn" title="Toggle Satellite">üõ∞Ô∏è Satellite</button>
                <button class="control-btn" id="locateBtn" title="Find My Location">üìç Locate</button>
                <div class="weather-controls">
                    <button class="control-btn weather-btn" id="weatherToggle" title="Toggle Weather Panel">‚òÅÔ∏è Weather</button>
                    <div class="weather-panel" id="weatherPanel">
                        <div class="weather-title">Aviation Weather</div>
                        <div class="weather-options">
                            <label class="weather-option">
                                <input type="checkbox" id="cloudsLayer"> 
                                <span>‚òÅÔ∏è Clouds</span>
                            </label>
                            <label class="weather-option">
                                <input type="checkbox" id="precipitationLayer">
                                <span>üåßÔ∏è Precipitation</span>
                            </label>
                            <label class="weather-option">
                                <input type="checkbox" id="windLayer">
                                <span>üí® Wind Speed</span>
                            </label>
                            <label class="weather-option">
                                <input type="checkbox" id="pressureLayer">
                                <span>üìä Pressure</span>
                            </label>
                            <label class="weather-option">
                                <input type="checkbox" id="temperatureLayer">
                                <span>üå°Ô∏è Temperature</span>
                            </label>
                            <label class="weather-option">
                                <input type="checkbox" id="turbulenceLayer">
                                <span>‚ö° Turbulence</span>
                            </label>
                        </div>
                        <div class="weather-opacity">
                            <label>Opacity</label>
                            <input type="range" id="weatherOpacity" min="0.1" max="1" step="0.1" value="0.6">
                            <span id="opacityValue">60%</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="coordinates" id="coordinates">
                Lat: 0.000000, Lng: 0.000000
            </div>
            
            <div class="weather-legend" id="weatherLegend">
                <div class="legend-title">Weather Legend</div>
                <div id="legendContent"></div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.min.js"></script>
    <script>
        // Major international airports data
        const airports = [
            { code: 'LAX', name: 'Los Angeles International', city: 'Los Angeles', country: 'USA', lat: 33.9425, lng: -118.4081 },
            { code: 'JFK', name: 'John F. Kennedy International', city: 'New York', country: 'USA', lat: 40.6413, lng: -73.7781 },
            { code: 'LHR', name: 'London Heathrow', city: 'London', country: 'UK', lat: 51.4700, lng: -0.4543 },
            { code: 'CDG', name: 'Charles de Gaulle', city: 'Paris', country: 'France', lat: 49.0097, lng: 2.5479 },
            { code: 'NRT', name: 'Narita International', city: 'Tokyo', country: 'Japan', lat: 35.7720, lng: 140.3929 },
            { code: 'SIN', name: 'Singapore Changi', city: 'Singapore', country: 'Singapore', lat: 1.3644, lng: 103.9915 },
            { code: 'DXB', name: 'Dubai International', city: 'Dubai', country: 'UAE', lat: 25.2532, lng: 55.3657 },
            { code: 'FRA', name: 'Frankfurt am Main', city: 'Frankfurt', country: 'Germany', lat: 50.0379, lng: 8.5622 },
            { code: 'AMS', name: 'Amsterdam Schiphol', city: 'Amsterdam', country: 'Netherlands', lat: 52.3105, lng: 4.7683 },
            { code: 'SYD', name: 'Sydney Kingsford Smith', city: 'Sydney', country: 'Australia', lat: -33.9399, lng: 151.1753 },
            { code: 'ORD', name: 'Chicago O\'Hare International', city: 'Chicago', country: 'USA', lat: 41.9742, lng: -87.9073 },
            { code: 'ATL', name: 'Hartsfield-Jackson Atlanta International', city: 'Atlanta', country: 'USA', lat: 33.6407, lng: -84.4277 },
            { code: 'PEK', name: 'Beijing Capital International', city: 'Beijing', country: 'China', lat: 40.0801, lng: 116.5846 },
            { code: 'ICN', name: 'Seoul Incheon International', city: 'Seoul', country: 'South Korea', lat: 37.4602, lng: 126.4407 },
            { code: 'MAD', name: 'Madrid-Barajas', city: 'Madrid', country: 'Spain', lat: 40.4839, lng: -3.5680 },
            { code: 'FCO', name: 'Rome Fiumicino', city: 'Rome', country: 'Italy', lat: 41.8045, lng: 12.2508 },
            { code: 'YYZ', name: 'Toronto Pearson International', city: 'Toronto', country: 'Canada', lat: 43.6777, lng: -79.6248 },
            { code: 'GRU', name: 'S√£o Paulo Guarulhos International', city: 'S√£o Paulo', country: 'Brazil', lat: -23.4356, lng: -46.4731 },
            { code: 'BOM', name: 'Chhatrapati Shivaji Maharaj International', city: 'Mumbai', country: 'India', lat: 19.0896, lng: 72.8656 },
            { code: 'HKG', name: 'Hong Kong International', city: 'Hong Kong', country: 'Hong Kong', lat: 22.3080, lng: 113.9185 }
        ];

        // Initialize map
        const map = L.map('map', {
            center: [20, 0],
            zoom: 3,
            zoomControl: false
        });

        // Add custom zoom control
        L.control.zoom({
            position: 'bottomright'
        }).addTo(map);

        // Satellite layer (default)
        const satelliteLayer = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
            maxZoom: 18,
            attribution: '¬© Esri, Maxar, Earthstar Geographics'
        });

        // Street layer
        const streetLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 18,
            attribution: '¬© OpenStreetMap contributors'
        });

        // Start with satellite view
        satelliteLayer.addTo(map);

        let currentLayer = 'satellite';
        const airportMarkers = [];
        const weatherLayers = {};
        let currentWeatherOpacity = 0.6;

        // Add airport markers
        airports.forEach(airport => {
            const marker = L.marker([airport.lat, airport.lng])
                .bindPopup(`
                    <div style="text-align: center;">
                        <h3 style="color: #4CAF50; margin-bottom: 8px;">${airport.code}</h3>
                        <div style="font-size: 14px; margin-bottom: 4px;">${airport.name}</div>
                        <div style="font-size: 12px; color: #aaa;">${airport.city}, ${airport.country}</div>
                        <div style="font-size: 11px; color: #888; margin-top: 8px;">
                            ${airport.lat.toFixed(4)}, ${airport.lng.toFixed(4)}
                        </div>
                    </div>
                `)
                .addTo(map);
            
            airportMarkers.push({ marker, airport });
        });

        // Populate airport list
        function populateAirportList(filteredAirports = airports) {
            const listContainer = document.getElementById('airportList');
            listContainer.innerHTML = '';
            
            filteredAirports.forEach(airport => {
                const item = document.createElement('div');
                item.className = 'airport-item';
                item.innerHTML = `
                    <div class="airport-code">${airport.code}</div>
                    <div class="airport-name">${airport.name}</div>
                    <div class="airport-location">${airport.city}, ${airport.country}</div>
                `;
                
                item.addEventListener('click', () => {
                    map.setView([airport.lat, airport.lng], 12);
                    const marker = airportMarkers.find(m => m.airport.code === airport.code);
                    if (marker) {
                        marker.marker.openPopup();
                    }
                });
                
                listContainer.appendChild(item);
            });
        }

        // Search functionality
        document.getElementById('searchInput').addEventListener('input', (e) => {
            const query = e.target.value.toLowerCase();
            const filtered = airports.filter(airport => 
                airport.code.toLowerCase().includes(query) ||
                airport.name.toLowerCase().includes(query) ||
                airport.city.toLowerCase().includes(query) ||
                airport.country.toLowerCase().includes(query)
            );
            populateAirportList(filtered);
        });

        // Control buttons
        document.getElementById('homeBtn').addEventListener('click', () => {
            map.setView([20, 0], 3);
        });

        document.getElementById('satelliteBtn').addEventListener('click', () => {
            if (currentLayer === 'satellite') {
                map.removeLayer(satelliteLayer);
                streetLayer.addTo(map);
                currentLayer = 'street';
                document.getElementById('satelliteBtn').innerHTML = 'üó∫Ô∏è Street';
            } else {
                map.removeLayer(streetLayer);
                satelliteLayer.addTo(map);
                currentLayer = 'satellite';
                document.getElementById('satelliteBtn').innerHTML = 'üõ∞Ô∏è Satellite';
            }
        });

        document.getElementById('locateBtn').addEventListener('click', () => {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition((position) => {
                    const lat = position.coords.latitude;
                    const lng = position.coords.longitude;
                    map.setView([lat, lng], 10);
                    
                    L.marker([lat, lng])
                        .addTo(map)
                        .bindPopup('Your Location')
                        .openPopup();
                });
            } else {
                alert('Geolocation is not supported by this browser.');
            }
        });

        // Update coordinates display
        map.on('mousemove', (e) => {
            const coords = document.getElementById('coordinates');
            coords.textContent = `Lat: ${e.latlng.lat.toFixed(6)}, Lng: ${e.latlng.lng.toFixed(6)}`;
        });

        // Initialize airport list
        populateAirportList();

        // Weather layer configurations - using free weather data sources
        const weatherConfigs = {
            clouds: {
                url: 'https://tile.openweathermap.org/map/clouds_new/{z}/{x}/{y}.png',
                name: 'Clouds',
                legend: [
                    { color: 'rgba(255,255,255,0.8)', label: 'Dense Clouds' },
                    { color: 'rgba(200,200,200,0.6)', label: 'Moderate Clouds' },
                    { color: 'rgba(150,150,150,0.4)', label: 'Light Clouds' }
                ]
            },
            precipitation: {
                url: 'https://tile.openweathermap.org/map/precipitation_new/{z}/{x}/{y}.png',
                name: 'Precipitation',
                legend: [
                    { color: '#FF0000', label: 'Heavy Rain/Snow' },
                    { color: '#FF6600', label: 'Moderate Rain' },
                    { color: '#FFFF00', label: 'Light Rain' },
                    { color: '#00FF00', label: 'Drizzle' }
                ]
            },
            wind: {
                url: 'https://tile.openweathermap.org/map/wind_new/{z}/{x}/{y}.png',
                name: 'Wind Speed',
                legend: [
                    { color: '#8B0000', label: '40+ kt (Severe)' },
                    { color: '#FF4500', label: '25-40 kt (Strong)' },
                    { color: '#FFD700', label: '15-25 kt (Moderate)' },
                    { color: '#32CD32', label: '5-15 kt (Light)' }
                ]
            },
            pressure: {
                url: 'https://tile.openweathermap.org/map/pressure_new/{z}/{x}/{y}.png',
                name: 'Pressure',
                legend: [
                    { color: '#800080', label: 'High Pressure (>1020mb)' },
                    { color: '#0000FF', label: 'Normal (1000-1020mb)' },
                    { color: '#FF0000', label: 'Low Pressure (<1000mb)' }
                ]
            },
            temperature: {
                url: 'https://tile.openweathermap.org/map/temp_new/{z}/{x}/{y}.png',
                name: 'Temperature',
                legend: [
                    { color: '#8B0000', label: 'Very Hot (>35¬∞C)' },
                    { color: '#FF6600', label: 'Hot (25-35¬∞C)' },
                    { color: '#FFFF00', label: 'Warm (15-25¬∞C)' },
                    { color: '#00FF00', label: 'Cool (5-15¬∞C)' },
                    { color: '#0000FF', label: 'Cold (<5¬∞C)' }
                ]
            },
            turbulence: {
                // Uses NASA/NOAA public weather radar data
                url: 'https://nowcoast.noaa.gov/arcgis/rest/services/nowcoast/radar_meteo_imagery_nexrad_time/MapServer/tile/{z}/{y}/{x}',
                name: 'Weather Radar',
                legend: [
                    { color: '#FF0000', label: 'Severe Weather' },
                    { color: '#FF6600', label: 'Heavy Precipitation' },
                    { color: '#FFFF00', label: 'Moderate Weather' },
                    { color: '#90EE90', label: 'Light Activity' }
                ]
            }
        };

        // Create weather layers
        function createWeatherLayer(layerType) {
            const config = weatherConfigs[layerType];
            return L.tileLayer(config.url, {
                opacity: currentWeatherOpacity,
                attribution: layerType === 'turbulence' ? '¬© NOAA' : '¬© OpenWeatherMap'
            });
        }

        // Weather panel toggle
        document.getElementById('weatherToggle').addEventListener('click', () => {
            const panel = document.getElementById('weatherPanel');
            const button = document.getElementById('weatherToggle');
            
            if (panel.classList.contains('active')) {
                panel.classList.remove('active');
                button.classList.remove('active');
            } else {
                panel.classList.add('active');
                button.classList.add('active');
            }
        });

        // Weather layer toggles
        Object.keys(weatherConfigs).forEach(layerType => {
            const checkbox = document.getElementById(layerType + 'Layer');
            
            checkbox.addEventListener('change', (e) => {
                if (e.target.checked) {
                    if (!weatherLayers[layerType]) {
                        weatherLayers[layerType] = createWeatherLayer(layerType);
                    }
                    weatherLayers[layerType].addTo(map);
                    updateWeatherLegend();
                } else {
                    if (weatherLayers[layerType]) {
                        map.removeLayer(weatherLayers[layerType]);
                    }
                    updateWeatherLegend();
                }
            });
        });

        // Weather opacity control
        const opacitySlider = document.getElementById('weatherOpacity');
        const opacityValue = document.getElementById('opacityValue');

        opacitySlider.addEventListener('input', (e) => {
            currentWeatherOpacity = parseFloat(e.target.value);
            opacityValue.textContent = Math.round(currentWeatherOpacity * 100) + '%';
            
            // Update opacity for all active weather layers
            Object.values(weatherLayers).forEach(layer => {
                if (map.hasLayer(layer)) {
                    layer.setOpacity(currentWeatherOpacity);
                }
            });
        });

        // Update weather legend
        function updateWeatherLegend() {
            const legend = document.getElementById('weatherLegend');
            const content = document.getElementById('legendContent');
            
            const activeLayers = Object.keys(weatherLayers).filter(layerType => {
                return weatherLayers[layerType] && map.hasLayer(weatherLayers[layerType]);
            });
            
            if (activeLayers.length > 0) {
                legend.classList.add('active');
                content.innerHTML = '';
                
                activeLayers.forEach(layerType => {
                    const config = weatherConfigs[layerType];
                    const layerDiv = document.createElement('div');
                    layerDiv.innerHTML = `<strong>${config.name}</strong>`;
                    content.appendChild(layerDiv);
                    
                    config.legend.forEach(item => {
                        const legendItem = document.createElement('div');
                        legendItem.className = 'legend-item';
                        legendItem.innerHTML = `
                            <div class="legend-color" style="background: ${item.color}"></div>
                            <span>${item.label}</span>
                        `;
                        content.appendChild(legendItem);
                    });
                    
                    if (activeLayers.indexOf(layerType) < activeLayers.length - 1) {
                        const separator = document.createElement('div');
                        separator.style.marginBottom = '8px';
                        content.appendChild(separator);
                    }
                });
            } else {
                legend.classList.remove('active');
            }
        }

        // Close weather panel when clicking outside
        document.addEventListener('click', (e) => {
            const panel = document.getElementById('weatherPanel');
            const button = document.getElementById('weatherToggle');
            
            if (panel.classList.contains('active') && 
                !panel.contains(e.target) && 
                !button.contains(e.target)) {
                panel.classList.remove('active');
                button.classList.remove('active');
            }
        });

        // Add some smooth animations
        map.on('zoomstart', () => {
            document.querySelector('.coordinates').style.opacity = '0.5';
        });

        map.on('zoomend', () => {
            document.querySelector('.coordinates').style.opacity = '1';
        });
    </script>
</body>
</html>