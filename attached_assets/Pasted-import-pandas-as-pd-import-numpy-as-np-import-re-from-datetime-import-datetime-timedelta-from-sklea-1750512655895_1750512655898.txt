import pandas as pd
import numpy as np
import re
from datetime import datetime, timedelta
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import yfinance as yf
import requests
from textblob import TextBlob
import matplotlib.pyplot as plt
import seaborn as sns

class AviationEconomicAnalyzer:
    def __init__(self):
        self.economic_keywords = {
            'fuel_price': ['jet fuel', 'oil price', 'crude oil', 'fuel cost', 'brent', 'wti', 'petroleum'],
            'currency': ['usd', 'eur', 'gbp', 'exchange rate', 'currency', 'forex', 'dollar', 'euro'],
            'inflation': ['inflation', 'cpi', 'consumer price', 'cost increase', 'price rise'],
            'interest_rates': ['interest rate', 'fed rate', 'monetary policy', 'central bank'],
            'economic_indicators': ['gdp', 'unemployment', 'recession', 'economic growth', 'market volatility'],
            'airline_costs': ['operational cost', 'maintenance cost', 'labor cost', 'overhead'],
            'demand_factors': ['passenger demand', 'travel demand', 'booking', 'capacity', 'load factor']
        }
        
        self.price_patterns = {
            'currency': r'\$?(\d+\.?\d*)\s*(usd|eur|gbp|dollars?|euros?|pounds?)',
            'fuel_price': r'\$?(\d+\.?\d*)\s*(?:per\s+)?(?:barrel|gallon|litre?)',
            'percentage': r'(\d+\.?\d*)%',
            'numbers': r'\b(\d+(?:,\d{3})*(?:\.\d+)?)\b'
        }
        
        self.vectorizer = TfidfVectorizer(max_features=1000, stop_words='english')
        self.classifier = RandomForestClassifier(n_estimators=100, random_state=42)
        
    def extract_economic_factors(self, text):
        """Extract economic factors from news text"""
        text_lower = text.lower()
        factors = {}
        
        # Extract keywords for each category
        for category, keywords in self.economic_keywords.items():
            matches = []
            for keyword in keywords:
                if keyword in text_lower:
                    matches.append(keyword)
            factors[category] = matches
            
        # Extract numerical values
        for pattern_name, pattern in self.price_patterns.items():
            matches = re.findall(pattern, text_lower, re.IGNORECASE)
            factors[f'{pattern_name}_values'] = matches
            
        return factors
    
    def get_real_time_data(self):
        """Fetch real-time economic data"""
        try:
            # Fetch oil prices (WTI and Brent)
            oil_data = yf.download(['CL=F', 'BZ=F'], period='5d', interval='1d')
            
            # Fetch currency data (major pairs)
            currency_pairs = ['EURUSD=X', 'GBPUSD=X', 'USDJPY=X']
            currency_data = yf.download(currency_pairs, period='5d', interval='1d')
            
            # Fetch airline stocks for context
            airline_stocks = ['AAL', 'DAL', 'UAL', 'LUV', 'BA']
            airline_data = yf.download(airline_stocks, period='5d', interval='1d')
            
            return {
                'oil': oil_data,
                'currency': currency_data,
                'airlines': airline_data
            }
        except Exception as e:
            print(f"Error fetching real-time data: {e}")
            return None
    
    def analyze_sentiment(self, text):
        """Analyze sentiment of economic news"""
        blob = TextBlob(text)
        return {
            'polarity': blob.sentiment.polarity,
            'subjectivity': blob.sentiment.subjectivity
        }
    
    def create_features(self, news_data):
        """Create features for ML model"""
        features_list = []
        labels = []
        
        for article in news_data:
            text = article.get('text', '')
            
            # Extract economic factors
            economic_factors = self.extract_economic_factors(text)
            
            # Sentiment analysis
            sentiment = self.analyze_sentiment(text)
            
            # Create feature vector
            features = {
                'fuel_mentions': len(economic_factors.get('fuel_price', [])),
                'currency_mentions': len(economic_factors.get('currency', [])),
                'inflation_mentions': len(economic_factors.get('inflation', [])),
                'interest_rate_mentions': len(economic_factors.get('interest_rates', [])),
                'economic_indicator_mentions': len(economic_factors.get('economic_indicators', [])),
                'sentiment_polarity': sentiment['polarity'],
                'sentiment_subjectivity': sentiment['subjectivity'],
                'text_length': len(text),
                'has_price_data': len(economic_factors.get('numbers_values', [])) > 0
            }
            
            features_list.append(features)
            
            # Create label based on economic impact (you can customize this)
            impact_score = (features['fuel_mentions'] * 2 + 
                          features['currency_mentions'] * 1.5 + 
                          features['inflation_mentions'] * 1.8 +
                          features['interest_rate_mentions'] * 1.3)
            
            if impact_score >= 5:
                labels.append('high_impact')
            elif impact_score >= 2:
                labels.append('medium_impact')
            else:
                labels.append('low_impact')
        
        return pd.DataFrame(features_list), labels
    
    def train_model(self, news_data):
        """Train the ML model"""
        print("Creating features from news data...")
        features_df, labels = self.create_features(news_data)
        
        # Split data
        X_train, X_test, y_train, y_test = train_test_split(
            features_df, labels, test_size=0.2, random_state=42
        )
        
        # Train classifier
        print("Training model...")
        self.classifier.fit(X_train, y_train)
        
        # Evaluate
        y_pred = self.classifier.predict(X_test)
        print("\nModel Performance:")
        print(classification_report(y_test, y_pred))
        
        return X_test, y_test, y_pred
    
    def predict_economic_impact(self, text):
        """Predict economic impact of news article"""
        # Extract features
        economic_factors = self.extract_economic_factors(text)
        sentiment = self.analyze_sentiment(text)
        
        features = {
            'fuel_mentions': len(economic_factors.get('fuel_price', [])),
            'currency_mentions': len(economic_factors.get('currency', [])),
            'inflation_mentions': len(economic_factors.get('inflation', [])),
            'interest_rate_mentions': len(economic_factors.get('interest_rates', [])),
            'economic_indicator_mentions': len(economic_factors.get('economic_indicators', [])),
            'sentiment_polarity': sentiment['polarity'],
            'sentiment_subjectivity': sentiment['subjectivity'],
            'text_length': len(text),
            'has_price_data': len(economic_factors.get('numbers_values', [])) > 0
        }
        
        features_df = pd.DataFrame([features])
        prediction = self.classifier.predict(features_df)[0]
        probability = self.classifier.predict_proba(features_df)[0]
        
        return {
            'prediction': prediction,
            'probability': dict(zip(self.classifier.classes_, probability)),
            'economic_factors': economic_factors,
            'sentiment': sentiment
        }
    
    def generate_economic_report(self, news_articles):
        """Generate comprehensive economic analysis report"""
        print("Generating Economic Analysis Report...")
        print("=" * 50)
        
        # Analyze all articles
        all_factors = []
        impact_predictions = []
        
        for i, article in enumerate(news_articles):
            text = article.get('text', '')
            result = self.predict_economic_impact(text)
            all_factors.append(result['economic_factors'])
            impact_predictions.append(result['prediction'])
            
            print(f"\nArticle {i+1}:")
            print(f"Title: {article.get('title', 'N/A')}")
            print(f"Economic Impact: {result['prediction']}")
            print(f"Sentiment: {result['sentiment']['polarity']:.2f}")
            
            # Show key economic factors
            for category, mentions in result['economic_factors'].items():
                if mentions and not category.endswith('_values'):
                    print(f"  {category}: {mentions}")
        
        # Summary statistics
        print(f"\n\nSUMMARY STATISTICS:")
        print(f"Total articles analyzed: {len(news_articles)}")
        print(f"High impact articles: {impact_predictions.count('high_impact')}")
        print(f"Medium impact articles: {impact_predictions.count('medium_impact')}")
        print(f"Low impact articles: {impact_predictions.count('low_impact')}")
        
        # Get real-time data
        real_time_data = self.get_real_time_data()
        if real_time_data:
            print(f"\nREAL-TIME MARKET DATA:")
            try:
                oil_price = real_time_data['oil']['Close'].iloc[-1]['CL=F']
                print(f"Current WTI Oil Price: ${oil_price:.2f}")
            except:
                print("Oil price data unavailable")
        
        return {
            'impact_distribution': {
                'high': impact_predictions.count('high_impact'),
                'medium': impact_predictions.count('medium_impact'),
                'low': impact_predictions.count('low_impact')
            },
            'all_factors': all_factors,
            'real_time_data': real_time_data
        }

# Example usage and test data
def create_sample_data():
    """Create sample aviation news data for testing"""
    sample_articles = [
        {
            'title': 'Rising Jet Fuel Costs Impact Airline Profitability',
            'text': 'Airlines are facing significant challenges as jet fuel prices have increased by 15% this quarter. The rise in crude oil prices, driven by geopolitical tensions, has pushed WTI crude to $85 per barrel. Major carriers are considering fuel surcharges to offset the $2.50 per gallon increase in jet fuel costs. Currency fluctuations have also affected international routes, with the USD strengthening against the EUR by 3%.'
        },
        {
            'title': 'Federal Reserve Rate Hike Affects Aviation Financing',
            'text': 'The Federal Reserve announced a 0.25% interest rate increase, impacting airline financing costs for new aircraft acquisitions. Boeing and Airbus orders may be affected as airlines reassess their capital expenditure plans. The decision comes amid inflation concerns, with the CPI rising 2.8% year-over-year.'
        },
        {
            'title': 'Passenger Demand Recovery Boosts Airline Stocks',
            'text': 'Strong passenger demand has led to increased load factors across major airlines. Delta reported 85% load factor for international routes, while domestic travel continues to show robust growth. The positive trend has boosted airline stock prices, with the sector gaining 12% this month.'
        },
        {
            'title': 'European Airlines Face Currency Headwinds',
            'text': 'European carriers are experiencing margin pressure due to EUR weakness against the USD. Lufthansa reported a 5% revenue impact from currency exchange rates. The company is implementing hedging strategies to mitigate forex risks on international operations.'
        }
    ]
    return sample_articles

# Main execution
if __name__ == "__main__":
    # Initialize analyzer
    analyzer = AviationEconomicAnalyzer()
    
    # Create sample data
    sample_news = create_sample_data()
    
    # Train model
    analyzer.train_model(sample_news)
    
    # Generate report
    report = analyzer.generate_economic_report(sample_news)
    
    # Test single article prediction
    test_article = "Oil prices surged to $90 per barrel today, causing concerns about increased operational costs for airlines. The 8% increase in fuel prices is expected to impact quarterly earnings."
    
    print(f"\n\nSINGLE ARTICLE ANALYSIS:")
    print("=" * 30)
    result = analyzer.predict_economic_impact(test_article)
    print(f"Predicted Impact: {result['prediction']}")
    print(f"Confidence: {max(result['probability'].values()):.2f}")
    print(f"Economic Factors Found: {result['economic_factors']}")