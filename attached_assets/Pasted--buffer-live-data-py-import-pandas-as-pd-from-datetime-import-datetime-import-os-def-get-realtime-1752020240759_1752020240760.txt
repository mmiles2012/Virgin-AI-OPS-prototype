# buffer_live_data.py

import pandas as pd
from datetime import datetime
import os

def get_realtime_virgin_flights():
    # ⛔ Replace this with your real feed
    now = datetime.utcnow()
    flights = []
    for i in range(5):
        flights.append({
            'flight_id': f'VS{300+i}',
            'origin': 'LHR',
            'dest': 'JFK',
            'departure_time': now - pd.Timedelta(minutes=60 + i*15),
            'scheduled_arrival': now + pd.Timedelta(minutes=180 + i*10),  # ⛔ Fallback STA
            'estimated_arrival': now + pd.Timedelta(minutes=170 + i*10),
            'lat': 50 + i,
            'lon': -20 - i*3,
            'alt': 35000 - i*1000,
            'gs': 470 + i*5,
            'dep_delay': i * 4
        })
    return flights

def enrich_live_flight(flight):
    now = datetime.utcnow()
    delay_minutes = (flight['estimated_arrival'] - flight['scheduled_arrival']).total_seconds() / 60.0
    delay_label = 2 if delay_minutes > 60 else 1 if delay_minutes > 15 else 0

    enriched = {
        'flight_id': flight['flight_id'],
        'origin': flight['origin'],
        'dest': flight['dest'],
        'departure_time': flight['departure_time'],
        'scheduled_arrival': flight['scheduled_arrival'],
        'estimated_arrival': flight['estimated_arrival'],
        'departure_delay_mins': flight.get('dep_delay', 0),
        'enroute_time_min': (now - flight['departure_time']).total_seconds() / 60.0,
        'altitude': flight['alt'],
        'ground_speed': flight['gs'],
        'lat': flight['lat'],
        'lon': flight['lon'],
        'day_of_week': now.weekday(),
        'hour_of_day': now.hour,
        'delay_minutes': delay_minutes,
        'delay_label': delay_label
    }
    return enriched

def append_to_buffer(flights, path="live_buffer.csv"):
    enriched_flights = [enrich_live_flight(f) for f in flights]
    df = pd.DataFrame(enriched_flights)
    if os.path.exists(path):
        df.to_csv(path, mode='a', header=False, index=False)
    else:
        df.to_csv(path, index=False)
    print(f"{len(df)} flights buffered to {path}")

if __name__ == "__main__":
    flights = get_realtime_virgin_flights()
    append_to_buffer(flights)