from flask import Flask, request, jsonify
import requests
from bs4 import BeautifulSoup
import json
import os
from datetime import datetime, timedelta

app = Flask(__name__)

# Source pages per passport
visa_pages = {
    "British": "https://en.wikipedia.org/wiki/Visa_requirements_for_British_citizens",
    "Indian": "https://en.wikipedia.org/wiki/Visa_requirements_for_Indian_citizens",
    "U.S.": "https://en.wikipedia.org/wiki/Visa_requirements_for_United_States_citizens"
}

# Destinations to check
target_countries = [
    "Turkey", "Pakistan", "Azerbaijan", "India", "Saudi Arabia",
    "Algeria", "Turkmenistan", "Uzbekistan", "Egypt", "South Africa", "Schengen"
]

CACHE_FILE = "visa_cache.json"
CACHE_DAYS = 7

# Load and validate cached results
def load_cache():
    if not os.path.exists(CACHE_FILE):
        return {}
    with open(CACHE_FILE, "r") as f:
        try:
            cached = json.load(f)
            timestamp = datetime.fromisoformat(cached.get("timestamp"))
            if datetime.now() - timestamp < timedelta(days=CACHE_DAYS):
                return cached.get("data", {})
        except Exception as e:
            print("Cache load error:", e)
    return {}

# Save fresh scrape to cache
def save_cache(data):
    with open(CACHE_FILE, "w") as f:
        json.dump({
            "timestamp": datetime.now().isoformat(),
            "data": data
        }, f)

# Scrape Wikipedia for a passport type
def scrape_passport(passport):
    url = visa_pages.get(passport)
    if not url:
        return []

    try:
        res = requests.get(url, timeout=10)
        soup = BeautifulSoup(res.content, "html.parser")
        tables = soup.find_all("table", {"class": "wikitable"})

        rows = []
        for table in tables:
            for row in table.find_all("tr")[1:]:
                cells = row.find_all(["td", "th"])
                text = [c.get_text(strip=True) for c in cells]
                if len(text) < 2:
                    continue
                country = text[0]
                visa = text[1]
                notes = text[2] if len(text) > 2 else ""
                for target in target_countries:
                    if target.lower() in country.lower():
                        rows.append({
                            "passport": passport,
                            "destination": country,
                            "visa_requirement": visa,
                            "notes": notes
                        })
        return rows
    except Exception as e:
        return [{"error": f"{passport} scraping error: {str(e)}"}]

# Build full dataset (for all 3 passports)
def build_cache():
    full_data = {}
    for passport in visa_pages:
        full_data[passport] = scrape_passport(passport)
    save_cache(full_data)
    return full_data

# Load or refresh cache
visa_data = load_cache()
if not visa_data:
    visa_data = build_cache()

# --------------------
# ROUTES
# --------------------

@app.route("/")
def root():
    return jsonify({
        "routes": ["/visa?passport=British&destination=Egypt", "/bulk?passport=Indian"],
        "supported_passports": list(visa_pages.keys()),
        "destinations": target_countries
    })

@app.route("/visa")
def visa_lookup():
    passport = request.args.get("passport")
    destination = request.args.get("destination")

    if not passport or not destination:
        return jsonify({"error": "Use /visa?passport=...&destination=..."}), 400

    entries = visa_data.get(passport)
    if not entries:
        return jsonify({"error": f"No data for passport: {passport}"}), 404

    for entry in entries:
        if destination.lower() in entry["destination"].lower():
            return jsonify(entry)
    return jsonify({"error": f"No visa info for {passport} â†’ {destination}"}), 404

@app.route("/bulk")
def bulk_lookup():
    passport = request.args.get("passport")
    if not passport:
        return jsonify({"error": "Use /bulk?passport=..."}), 400

    data = visa_data.get(passport)
    if not data:
        return jsonify({"error": f"No data found for passport: {passport}"}), 404
    return jsonify(data)

# --------------------
# Run Server
# --------------------

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)