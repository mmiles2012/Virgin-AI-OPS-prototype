<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Virgin Atlantic Flight Tracker</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #e53935 0%, #c62828 100%);
            color: white;
            padding: 30px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path d="M20 20h60v60H20z" fill="none" stroke="rgba(255,255,255,0.1)" stroke-width="0.5"/></svg>') repeat;
            animation: float 20s linear infinite;
        }

        @keyframes float {
            0% { transform: translate(-50%, -50%) rotate(0deg); }
            100% { transform: translate(-50%, -50%) rotate(360deg); }
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            position: relative;
            z-index: 1;
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
            position: relative;
            z-index: 1;
        }

        .controls {
            padding: 30px;
            text-align: center;
            border-bottom: 1px solid #eee;
        }

        .btn {
            background: linear-gradient(135deg, #e53935 0%, #c62828 100%);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 25px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 0 10px;
            box-shadow: 0 4px 15px rgba(229, 57, 53, 0.3);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(229, 57, 53, 0.4);
        }

        .btn:active {
            transform: translateY(0);
        }

        .btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .status {
            padding: 20px;
            text-align: center;
            font-size: 1.1rem;
            background: #f8f9fa;
            border-bottom: 1px solid #eee;
        }

        .loading {
            color: #007bff;
            animation: pulse 1.5s infinite;
        }

        .error {
            color: #dc3545;
        }

        .success {
            color: #28a745;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .flights-container {
            padding: 30px;
            max-height: 600px;
            overflow-y: auto;
        }

        .flight-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 20px;
        }

        .flight-card {
            background: white;
            border: 1px solid #e0e0e0;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .flight-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #e53935, #c62828);
        }

        .flight-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
        }

        .flight-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .callsign {
            font-size: 1.3rem;
            font-weight: bold;
            color: #e53935;
        }

        .icao {
            font-size: 0.9rem;
            color: #666;
            background: #f0f0f0;
            padding: 4px 8px;
            border-radius: 12px;
        }

        .flight-details {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            font-size: 0.9rem;
        }

        .detail-row {
            display: flex;
            justify-content: space-between;
            padding: 5px 0;
            border-bottom: 1px solid #f0f0f0;
        }

        .detail-label {
            font-weight: 600;
            color: #555;
        }

        .detail-value {
            color: #333;
        }

        .no-flights {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }

        .no-flights svg {
            width: 64px;
            height: 64px;
            margin-bottom: 20px;
            opacity: 0.5;
        }

        .footer {
            padding: 20px;
            text-align: center;
            background: #f8f9fa;
            font-size: 0.9rem;
            color: #666;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>‚úàÔ∏è Virgin Atlantic Flight Tracker</h1>
            <p>Real-time tracking of Virgin Atlantic flights worldwide</p>
        </div>

        <div class="controls">
            <button class="btn" onclick="fetchFlights()" id="fetchBtn">üîÑ Refresh Flights</button>
            <button class="btn" onclick="toggleAutoRefresh()" id="autoBtn">‚è∞ Auto Refresh: OFF</button>
        </div>

        <div class="status" id="status">
            Click "Refresh Flights" to load Virgin Atlantic flights
        </div>

        <div class="flights-container">
            <div class="flight-grid" id="flightGrid"></div>
        </div>

        <div class="footer">
            Data provided by OpenSky Network API ‚Ä¢ Updates every 30 seconds when auto-refresh is enabled
        </div>
    </div>

    <script>
        let autoRefreshInterval = null;
        let isAutoRefresh = false;

        async function fetchFlights() {
            const statusDiv = document.getElementById('status');
            const fetchBtn = document.getElementById('fetchBtn');
            const flightGrid = document.getElementById('flightGrid');

            // Update UI to show loading state
            statusDiv.innerHTML = '<span class="loading">üîÑ Fetching Virgin Atlantic flights...</span>';
            fetchBtn.disabled = true;
            fetchBtn.textContent = 'üîÑ Loading...';

            try {
                // Fetch all current flights from OpenSky Network
                const response = await fetch('https://opensky-network.org/api/states/all');
                
                if (!response.ok) {
                    throw new Error(`API Error: ${response.status}`);
                }

                const data = await response.json();
                
                if (!data.states || data.states.length === 0) {
                    throw new Error('No flight data available');
                }

                // Filter for Virgin Atlantic flights (callsigns starting with VIR)
                const virginFlights = data.states.filter(flight => {
                    const callsign = flight[1];
                    return callsign && callsign.trim().toUpperCase().startsWith('VIR');
                });

                displayFlights(virginFlights);
                
                statusDiv.innerHTML = `<span class="success">‚úÖ Found ${virginFlights.length} Virgin Atlantic flights</span>`;
                
            } catch (error) {
                console.error('Error fetching flights:', error);
                statusDiv.innerHTML = `<span class="error">‚ùå Error: ${error.message}</span>`;
                flightGrid.innerHTML = '';
            } finally {
                fetchBtn.disabled = false;
                fetchBtn.textContent = 'üîÑ Refresh Flights';
            }
        }

        function displayFlights(flights) {
            const flightGrid = document.getElementById('flightGrid');
            
            if (flights.length === 0) {
                flightGrid.innerHTML = `
                    <div class="no-flights">
                        <svg viewBox="0 0 24 24" fill="currentColor">
                            <path d="M21,16V14L13,9V3.5A1.5,1.5 0 0,0 11.5,2A1.5,1.5 0 0,0 10,3.5V9L2,14V16L10,13.5V19L8,20.5V22L11.5,21L15,22V20.5L13,19V13.5L21,16Z" />
                        </svg>
                        <h3>No Virgin Atlantic flights currently tracked</h3>
                        <p>This could be due to flights being out of range or temporarily unavailable in the data feed.</p>
                    </div>
                `;
                return;
            }

            flightGrid.innerHTML = flights.map(flight => {
                const [
                    icao24, callsign, origin_country, time_position,
                    last_contact, longitude, latitude, baro_altitude,
                    on_ground, velocity, true_track, vertical_rate,
                    sensors, geo_altitude, squawk, spi, position_source
                ] = flight;

                const cleanCallsign = callsign ? callsign.trim() : 'Unknown';
                const alt = baro_altitude ? Math.round(baro_altitude * 3.28084) : 'N/A'; // Convert meters to feet
                const speed = velocity ? Math.round(velocity * 1.94384) : 'N/A'; // Convert m/s to knots
                const heading = true_track ? Math.round(true_track) : 'N/A';
                const vspeed = vertical_rate ? Math.round(vertical_rate * 196.85) : 'N/A'; // Convert m/s to ft/min
                const lat = latitude ? latitude.toFixed(4) : 'N/A';
                const lon = longitude ? longitude.toFixed(4) : 'N/A';
                
                return `
                    <div class="flight-card">
                        <div class="flight-header">
                            <div class="callsign">${cleanCallsign}</div>
                            <div class="icao">${icao24.toUpperCase()}</div>
                        </div>
                        <div class="flight-details">
                            <div class="detail-row">
                                <span class="detail-label">Country:</span>
                                <span class="detail-value">${origin_country || 'Unknown'}</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Status:</span>
                                <span class="detail-value">${on_ground ? 'üõ¨ On Ground' : '‚úàÔ∏è In Flight'}</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Altitude:</span>
                                <span class="detail-value">${alt} ft</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Speed:</span>
                                <span class="detail-value">${speed} kts</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Heading:</span>
                                <span class="detail-value">${heading}¬∞</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">V/Speed:</span>
                                <span class="detail-value">${vspeed} ft/min</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Latitude:</span>
                                <span class="detail-value">${lat}</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Longitude:</span>
                                <span class="detail-value">${lon}</span>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        function toggleAutoRefresh() {
            const autoBtn = document.getElementById('autoBtn');
            
            if (isAutoRefresh) {
                // Turn off auto refresh
                clearInterval(autoRefreshInterval);
                autoRefreshInterval = null;
                isAutoRefresh = false;
                autoBtn.textContent = '‚è∞ Auto Refresh: OFF';
                autoBtn.style.background = 'linear-gradient(135deg, #e53935 0%, #c62828 100%)';
            } else {
                // Turn on auto refresh
                autoRefreshInterval = setInterval(fetchFlights, 30000); // Refresh every 30 seconds
                isAutoRefresh = true;
                autoBtn.textContent = '‚è∞ Auto Refresh: ON';
                autoBtn.style.background = 'linear-gradient(135deg, #28a745 0%, #20c997 100%)';
                
                // Fetch flights immediately
                fetchFlights();
            }
        }

        // Fetch flights on page load
        window.addEventListener('load', fetchFlights);
    </script>
</body>
</html>