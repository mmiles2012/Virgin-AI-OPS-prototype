import React, { createContext, useContext, useState, useCallback, useEffect } from 'react';
import { Plane, MapPin, Clock, Fuel, Users, Settings, TrendingUp, AlertTriangle } from 'lucide-react';

// Mock Virgin Atlantic aircraft data
const mockAircraftData = [
  {
    id: 'VS001',
    callSign: 'VIR25M',
    airline: 'Virgin Atlantic',
    aircraft: 'Boeing 787-9',
    registration: 'G-VZIG',
    position: { lat: 51.4700, lon: -0.4543, altitude: 37000 },
    speed: 485,
    heading: 270,
    origin: 'LHR',
    destination: 'JFK',
    status: 'En Route',
    fuel: 62,
    passengers: 254,
    crew: 11,
    departureTime: '2025-06-04T11:45:00Z',
    arrivalTime: '2025-06-04T15:30:00Z',
    flightTime: '8h 45m',
    distance: 3459,
    weather: { condition: 'Clear', temperature: -51, windSpeed: 38 }
  },
  {
    id: 'VS002',
    callSign: 'VIR9K',
    airline: 'Virgin Atlantic',
    aircraft: 'Airbus A350-1000',
    registration: 'G-VLNK',
    position: { lat: 40.6413, lon: -73.7781, altitude: 41000 },
    speed: 520,
    heading: 90,
    origin: 'JFK',
    destination: 'LHR',
    status: 'Cruising',
    fuel: 58,
    passengers: 335,
    crew: 13,
    departureTime: '2025-06-04T09:20:00Z',
    arrivalTime: '2025-06-04T21:15:00Z',
    flightTime: '6h 55m',
    distance: 3459,
    weather: { condition: 'Light Turbulence', temperature: -56, windSpeed: 42 }
  },
  {
    id: 'VS003',
    callSign: 'VIR41B',
    airline: 'Virgin Atlantic',
    aircraft: 'Boeing 787-9',
    registration: 'G-VOOM',
    position: { lat: 25.7933, lon: -80.2906, altitude: 35000 },
    speed: 475,
    heading: 135,
    origin: 'MIA',
    destination: 'LGW',
    status: 'Climbing',
    fuel: 78,
    passengers: 245,
    crew: 10,
    departureTime: '2025-06-04T14:30:00Z',
    arrivalTime: '2025-06-05T05:45:00Z',
    flightTime: '9h 15m',
    distance: 4406,
    weather: { condition: 'Partly Cloudy', temperature: -42, windSpeed: 28 }
  },
  {
    id: 'VS004',
    callSign: 'VIR155',
    airline: 'Virgin Atlantic',
    aircraft: 'Airbus A330-300',
    registration: 'G-VRAY',
    position: { lat: 18.4382, lon: -66.0042, altitude: 39000 },
    speed: 495,
    heading: 45,
    origin: 'BGI',
    destination: 'LGW',
    status: 'En Route',
    fuel: 52,
    passengers: 285,
    crew: 12,
    departureTime: '2025-06-04T16:10:00Z',
    arrivalTime: '2025-06-05T06:25:00Z',
    flightTime: '8h 15m',
    distance: 4200,
    weather: { condition: 'Clear', temperature: -48, windSpeed: 35 }
  },
  {
    id: 'VS005',
    callSign: 'VIR131',
    airline: 'Virgin Atlantic',
    aircraft: 'Boeing 747-400',
    registration: 'G-VBIG',
    position: { lat: 37.6213, lon: -122.3790, altitude: 33000 },
    speed: 465,
    heading: 60,
    origin: 'SFO',
    destination: 'LHR',
    status: 'Descending',
    fuel: 35,
    passengers: 345,
    crew: 15,
    departureTime: '2025-06-04T12:15:00Z',
    arrivalTime: '2025-06-05T07:30:00Z',
    flightTime: '11h 15m',
    distance: 5350,
    weather: { condition: 'Moderate Turbulence', temperature: -38, windSpeed: 45 }
  }
];

// Aircraft Data Context
const AircraftDataContext = createContext();

// Custom hook to use aircraft data
export const useAircraftData = () => {
  const context = useContext(AircraftDataContext);
  if (!context) {
    throw new Error('useAircraftData must be used within AircraftDataProvider');
  }
  return context;
};

// Aircraft Data Provider
const AircraftDataProvider = ({ children }) => {
  const [selectedAircraft, setSelectedAircraft] = useState(null);
  const [aircraftList, setAircraftList] = useState(mockAircraftData);
  const [filters, setFilters] = useState({
    airline: '',
    status: '',
    minAltitude: 0
  });

  const selectAircraft = useCallback((aircraft) => {
    setSelectedAircraft(aircraft);
  }, []);

  const updateAircraftData = useCallback((aircraftId, updates) => {
    setAircraftList(prev => 
      prev.map(aircraft => 
        aircraft.id === aircraftId 
          ? { ...aircraft, ...updates }
          : aircraft
      )
    );
    
    // Update selected aircraft if it's the one being updated
    if (selectedAircraft && selectedAircraft.id === aircraftId) {
      setSelectedAircraft(prev => ({ ...prev, ...updates }));
    }
  }, [selectedAircraft]);

  const filteredAircraft = aircraftList.filter(aircraft => {
    return (
      aircraft.airline === 'Virgin Atlantic' && // Only Virgin Atlantic aircraft
      (!filters.status || aircraft.status === filters.status) &&
      (aircraft.position.altitude >= filters.minAltitude)
    );
  });

  const value = {
    selectedAircraft,
    aircraftList: filteredAircraft,
    filters,
    setFilters,
    selectAircraft,
    updateAircraftData
  };

  return (
    <AircraftDataContext.Provider value={value}>
      {children}
    </AircraftDataContext.Provider>
  );
};

// Aircraft List Pane
const AircraftListPane = ({ className = '' }) => {
  const { aircraftList, selectedAircraft, selectAircraft, filters, setFilters } = useAircraftData();

  return (
    <div className={`bg-gray-800 rounded-lg p-4 ${className}`}>
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-xl font-bold text-white flex items-center">
          <Plane className="mr-2" size={20} />
          Virgin Atlantic Fleet
        </h2>
        <span className="text-sm text-gray-400">{aircraftList.length} aircraft</span>
      </div>

      {/* Filters */}
      <div className="mb-4 space-y-2">
        <select
          value={filters.status}
          onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value }))}
          className="w-full p-2 bg-gray-700 text-white rounded text-sm"
        >
          <option value="">All Status</option>
          <option value="En Route">En Route</option>
          <option value="Climbing">Climbing</option>
          <option value="Cruising">Cruising</option>
          <option value="Descending">Descending</option>
        </select>
        <input
          type="range"
          min="0"
          max="45000"
          step="1000"
          value={filters.minAltitude}
          onChange={(e) => setFilters(prev => ({ ...prev, minAltitude: parseInt(e.target.value) }))}
          className="w-full"
        />
        <div className="text-xs text-gray-400">
          Min Altitude: {filters.minAltitude.toLocaleString()}ft
        </div>
      </div>

      {/* Aircraft List */}
      <div className="space-y-2 max-h-64 overflow-y-auto">
        {aircraftList.map((aircraft) => (
          <div
            key={aircraft.id}
            onClick={() => selectAircraft(aircraft)}
            className={`p-3 rounded cursor-pointer transition-colors ${
              selectedAircraft?.id === aircraft.id
                ? 'bg-blue-600 text-white'
                : 'bg-gray-700 text-gray-200 hover:bg-gray-600'
            }`}
          >
            <div className="flex justify-between items-start">
              <div>
                <div className="font-semibold">{aircraft.callSign}</div>
                <div className="text-sm opacity-75">{aircraft.airline}</div>
                <div className="text-xs opacity-60">{aircraft.origin} â†’ {aircraft.destination}</div>
              </div>
              <div className="text-right">
                <div className="text-sm">{aircraft.status}</div>
                <div className="text-xs opacity-75">{aircraft.position.altitude.toLocaleString()}ft</div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// Aircraft Details Pane
const AircraftDetailsPane = ({ className = '' }) => {
  const { selectedAircraft } = useAircraftData();

  if (!selectedAircraft) {
    return (
      <div className={`bg-gray-800 rounded-lg p-4 ${className}`}>
        <h2 className="text-xl font-bold text-white mb-4">Aircraft Details</h2>
        <div className="text-gray-400 text-center py-8">
          Select an aircraft to view details
        </div>
      </div>
    );
  }

  return (
    <div className={`bg-gray-800 rounded-lg p-4 ${className}`}>
      <h2 className="text-xl font-bold text-white mb-4">Aircraft Details</h2>
      
      <div className="space-y-4">
        {/* Basic Info */}
        <div className="bg-gray-700 rounded p-3">
          <h3 className="text-lg font-semibold text-white mb-2">{selectedAircraft.callSign}</h3>
          <div className="grid grid-cols-2 gap-2 text-sm">
            <div className="text-gray-400">Airline:</div>
            <div className="text-white">{selectedAircraft.airline}</div>
            <div className="text-gray-400">Aircraft:</div>
            <div className="text-white">{selectedAircraft.aircraft}</div>
            <div className="text-gray-400">Registration:</div>
            <div className="text-white">{selectedAircraft.registration}</div>
            <div className="text-gray-400">Status:</div>
            <div className="text-white">{selectedAircraft.status}</div>
          </div>
        </div>

        {/* Flight Info */}
        <div className="bg-gray-700 rounded p-3">
          <h4 className="font-semibold text-white mb-2 flex items-center">
            <MapPin size={16} className="mr-1" />
            Flight Information
          </h4>
          <div className="grid grid-cols-2 gap-2 text-sm">
            <div className="text-gray-400">Origin:</div>
            <div className="text-white">{selectedAircraft.origin}</div>
            <div className="text-gray-400">Destination:</div>
            <div className="text-white">{selectedAircraft.destination}</div>
            <div className="text-gray-400">Flight Time:</div>
            <div className="text-white">{selectedAircraft.flightTime}</div>
            <div className="text-gray-400">Distance:</div>
            <div className="text-white">{selectedAircraft.distance.toLocaleString()} miles</div>
          </div>
        </div>

        {/* Position */}
        <div className="bg-gray-700 rounded p-3">
          <h4 className="font-semibold text-white mb-2">Current Position</h4>
          <div className="grid grid-cols-2 gap-2 text-sm">
            <div className="text-gray-400">Latitude:</div>
            <div className="text-white">{selectedAircraft.position.lat.toFixed(4)}Â°</div>
            <div className="text-gray-400">Longitude:</div>
            <div className="text-white">{selectedAircraft.position.lon.toFixed(4)}Â°</div>
            <div className="text-gray-400">Altitude:</div>
            <div className="text-white">{selectedAircraft.position.altitude.toLocaleString()} ft</div>
            <div className="text-gray-400">Speed:</div>
            <div className="text-white">{selectedAircraft.speed} mph</div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Aircraft Metrics Pane
const AircraftMetricsPane = ({ className = '' }) => {
  const { selectedAircraft } = useAircraftData();

  if (!selectedAircraft) {
    return (
      <div className={`bg-gray-800 rounded-lg p-4 ${className}`}>
        <h2 className="text-xl font-bold text-white mb-4">Metrics</h2>
        <div className="text-gray-400 text-center py-8">
          Select an aircraft to view metrics
        </div>
      </div>
    );
  }

  const metrics = [
    {
      label: 'Fuel Level',
      value: selectedAircraft.fuel,
      unit: '%',
      icon: Fuel,
      color: selectedAircraft.fuel > 50 ? 'text-green-400' : selectedAircraft.fuel > 25 ? 'text-yellow-400' : 'text-red-400'
    },
    {
      label: 'Passengers',
      value: selectedAircraft.passengers,
      unit: '',
      icon: Users,
      color: 'text-blue-400'
    },
    {
      label: 'Ground Speed',
      value: selectedAircraft.speed,
      unit: 'mph',
      icon: TrendingUp,
      color: 'text-purple-400'
    },
    {
      label: 'Temperature',
      value: selectedAircraft.weather.temperature,
      unit: 'Â°C',
      icon: Settings,
      color: 'text-cyan-400'
    }
  ];

  return (
    <div className={`bg-gray-800 rounded-lg p-4 ${className}`}>
      <h2 className="text-xl font-bold text-white mb-4">Live Metrics</h2>
      
      <div className="grid grid-cols-2 gap-3">
        {metrics.map((metric, index) => (
          <div key={index} className="bg-gray-700 rounded p-3">
            <div className="flex items-center justify-between mb-2">
              <metric.icon size={20} className={metric.color} />
              {metric.label === 'Fuel Level' && metric.value < 30 && (
                <AlertTriangle size={16} className="text-red-400" />
              )}
            </div>
            <div className="text-2xl font-bold text-white">
              {metric.value}{metric.unit}
            </div>
            <div className="text-sm text-gray-400">{metric.label}</div>
          </div>
        ))}
      </div>

      {/* Weather Info */}
      <div className="mt-4 bg-gray-700 rounded p-3">
        <h4 className="font-semibold text-white mb-2">Weather Conditions</h4>
        <div className="text-sm space-y-1">
          <div className="flex justify-between">
            <span className="text-gray-400">Condition:</span>
            <span className="text-white">{selectedAircraft.weather.condition}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-400">Wind Speed:</span>
            <span className="text-white">{selectedAircraft.weather.windSpeed} mph</span>
          </div>
        </div>
      </div>
    </div>
  );
};

// Flight Timeline Pane
const FlightTimelinePane = ({ className = '' }) => {
  const { selectedAircraft } = useAircraftData();

  if (!selectedAircraft) {
    return (
      <div className={`bg-gray-800 rounded-lg p-4 ${className}`}>
        <h2 className="text-xl font-bold text-white mb-4">Flight Timeline</h2>
        <div className="text-gray-400 text-center py-8">
          Select an aircraft to view timeline
        </div>
      </div>
    );
  }

  const formatTime = (timeString) => {
    return new Date(timeString).toLocaleTimeString('en-US', {
      hour: '2-digit',
      minute: '2-digit',
      hour12: true
    });
  };

  return (
    <div className={`bg-gray-800 rounded-lg p-4 ${className}`}>
      <h2 className="text-xl font-bold text-white mb-4 flex items-center">
        <Clock className="mr-2" size={20} />
        Flight Timeline
      </h2>
      
      <div className="space-y-4">
        <div className="flex items-center space-x-4">
          <div className="w-3 h-3 bg-green-400 rounded-full"></div>
          <div className="flex-1">
            <div className="text-white font-semibold">Departure - {selectedAircraft.origin}</div>
            <div className="text-gray-400 text-sm">{formatTime(selectedAircraft.departureTime)}</div>
          </div>
        </div>
        
        <div className="flex items-center space-x-4">
          <div className="w-3 h-3 bg-blue-400 rounded-full animate-pulse"></div>
          <div className="flex-1">
            <div className="text-white font-semibold">Current Status</div>
            <div className="text-gray-400 text-sm">{selectedAircraft.status}</div>
          </div>
        </div>
        
        <div className="flex items-center space-x-4">
          <div className="w-3 h-3 bg-gray-500 rounded-full"></div>
          <div className="flex-1">
            <div className="text-white font-semibold">Arrival - {selectedAircraft.destination}</div>
            <div className="text-gray-400 text-sm">{formatTime(selectedAircraft.arrivalTime)}</div>
          </div>
        </div>
      </div>

      <div className="mt-4 pt-4 border-t border-gray-700">
        <div className="flex justify-between text-sm">
          <span className="text-gray-400">Total Flight Time:</span>
          <span className="text-white">{selectedAircraft.flightTime}</span>
        </div>
      </div>
    </div>
  );
};

// Main Dashboard Component
const AircraftDashboard = () => {
  const [updateInterval, setUpdateInterval] = useState(null);
  const { selectedAircraft, updateAircraftData } = useAircraftData();

  // Simulate real-time updates
  useEffect(() => {
    const interval = setInterval(() => {
      if (selectedAircraft) {
        // Simulate small changes in position, fuel, etc.
        const updates = {
          position: {
            ...selectedAircraft.position,
            lat: selectedAircraft.position.lat + (Math.random() - 0.5) * 0.01,
            lon: selectedAircraft.position.lon + (Math.random() - 0.5) * 0.01,
            altitude: Math.max(1000, selectedAircraft.position.altitude + (Math.random() - 0.5) * 1000)
          },
          fuel: Math.max(0, selectedAircraft.fuel - Math.random() * 0.5),
          speed: Math.max(100, selectedAircraft.speed + (Math.random() - 0.5) * 20)
        };
        updateAircraftData(selectedAircraft.id, updates);
      }
    }, 5000);

    setUpdateInterval(interval);
    return () => clearInterval(interval);
  }, [selectedAircraft, updateAircraftData]);

  return (
    <div className="min-h-screen bg-gray-900 p-4">
      <div className="max-w-7xl mx-auto">
        <h1 className="text-3xl font-bold text-white mb-6">
          Virgin Atlantic Fleet Tracking Dashboard
        </h1>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
          {/* Left Column */}
          <div className="space-y-4">
            <AircraftListPane />
            <FlightTimelinePane />
          </div>
          
          {/* Middle Column */}
          <div className="space-y-4">
            <AircraftDetailsPane />
          </div>
          
          {/* Right Column */}
          <div className="space-y-4">
            <AircraftMetricsPane />
          </div>
        </div>
        
        {selectedAircraft && (
          <div className="mt-4 text-center text-gray-400 text-sm">
            Selected: {selectedAircraft.callSign} - Data updates every 5 seconds
          </div>
        )}
      </div>
    </div>
  );
};

// Main App Component
const App = () => {
  return (
    <AircraftDataProvider>
      <AircraftDashboard />
    </AircraftDataProvider>
  );
};

export default App;