import requests
import json
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional

class FlightAwareAPI:
    def __init__(self, api_key: str):
        """
        Initialize FlightAware AeroAPI client
        
        Args:
            api_key: Your FlightAware API key
        """
        self.api_key = api_key
        self.base_url = "https://aeroapi.flightaware.com/aeroapi"
        self.headers = {
            "x-apikey": api_key,
            "Content-Type": "application/json"
        }
    
    def get_airport_delays(self, airport_code: str) -> Dict:
        """
        Get current delay information for an airport
        
        Args:
            airport_code: 3 or 4 letter airport code (e.g., 'LAX', 'KJFK')
            
        Returns:
            Dictionary containing delay information
        """
        url = f"{self.base_url}/airports/{airport_code}/delays"
        
        try:
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"Error fetching airport delays: {e}")
            return {}
    
    def get_airport_flights(self, airport_code: str, flight_type: str = "departures") -> Dict:
        """
        Get current flights for an airport
        
        Args:
            airport_code: 3 or 4 letter airport code
            flight_type: "departures" or "arrivals"
            
        Returns:
            Dictionary containing flight information
        """
        url = f"{self.base_url}/airports/{airport_code}/flights/{flight_type}"
        
        try:
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"Error fetching airport flights: {e}")
            return {}
    
    def get_flight_info(self, flight_id: str) -> Dict:
        """
        Get detailed information about a specific flight
        
        Args:
            flight_id: Flight identifier (e.g., 'UAL123-1234567890-airline-0123')
            
        Returns:
            Dictionary containing flight details
        """
        url = f"{self.base_url}/flights/{flight_id}"
        
        try:
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"Error fetching flight info: {e}")
            return {}
    
    def search_flights(self, origin: str, destination: str, departure_date: str = None) -> Dict:
        """
        Search for flights between two airports
        
        Args:
            origin: Origin airport code
            destination: Destination airport code
            departure_date: Date in YYYY-MM-DD format (optional)
            
        Returns:
            Dictionary containing search results
        """
        url = f"{self.base_url}/flights/search"
        params = {
            "origin": origin,
            "destination": destination
        }
        
        if departure_date:
            params["departure_date"] = departure_date
        
        try:
            response = requests.get(url, headers=self.headers, params=params)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"Error searching flights: {e}")
            return {}

class AirportMonitor:
    def __init__(self, api_key: str):
        self.api = FlightAwareAPI(api_key)
    
    def get_airport_summary(self, airport_code: str) -> Dict:
        """
        Get a comprehensive summary of airport performance
        
        Args:
            airport_code: Airport code to monitor
            
        Returns:
            Dictionary with airport summary data
        """
        summary = {
            "airport": airport_code,
            "timestamp": datetime.now().isoformat(),
            "delays": {},
            "departures": {},
            "arrivals": {}
        }
        
        # Get delay information
        delays = self.api.get_airport_delays(airport_code)
        if delays:
            summary["delays"] = delays
        
        # Get departures
        departures = self.api.get_airport_flights(airport_code, "departures")
        if departures:
            summary["departures"] = departures
        
        # Get arrivals
        arrivals = self.api.get_airport_flights(airport_code, "arrivals")
        if arrivals:
            summary["arrivals"] = arrivals
        
        return summary
    
    def calculate_ontime_percentage(self, flights_data: Dict) -> float:
        """
        Calculate on-time percentage from flights data
        
        Args:
            flights_data: Flight data from API
            
        Returns:
            On-time percentage as float
        """
        if not flights_data.get("flights"):
            return 0.0
        
        total_flights = len(flights_data["flights"])
        on_time_flights = 0
        
        for flight in flights_data["flights"]:
            # Consider a flight on-time if delay is less than 15 minutes
            delay_minutes = flight.get("delay", 0)
            if delay_minutes < 15:
                on_time_flights += 1
        
        return (on_time_flights / total_flights) * 100 if total_flights > 0 else 0.0
    
    def monitor_multiple_airports(self, airport_codes: List[str]) -> Dict:
        """
        Monitor multiple airports and return summary
        
        Args:
            airport_codes: List of airport codes to monitor
            
        Returns:
            Dictionary with data for all airports
        """
        results = {}
        
        for airport in airport_codes:
            print(f"Monitoring {airport}...")
            results[airport] = self.get_airport_summary(airport)
        
        return results

# Example usage and setup
def main():
    # Get API key from environment variable
    api_key = os.getenv("FLIGHTAWARE_API_KEY")
    
    if not api_key:
        print("Please set FLIGHTAWARE_API_KEY environment variable")
        print("You can get an API key at: https://flightaware.com/commercial/aeroapi/")
        return
    
    # Initialize the monitor
    monitor = AirportMonitor(api_key)
    
    # Example: Monitor a single airport
    airport_code = "LAX"  # Change to your desired airport
    print(f"Getting summary for {airport_code}...")
    
    summary = monitor.get_airport_summary(airport_code)
    print(json.dumps(summary, indent=2))
    
    # Example: Monitor multiple airports
    airports_to_monitor = ["LAX", "JFK", "ORD", "DFW"]
    print(f"\nMonitoring multiple airports: {airports_to_monitor}")
    
    multi_results = monitor.monitor_multiple_airports(airports_to_monitor)
    
    # Display on-time performance summary
    print("\n--- On-Time Performance Summary ---")
    for airport, data in multi_results.items():
        if data.get("departures"):
            dep_ontime = monitor.calculate_ontime_percentage(data["departures"])
            print(f"{airport} Departures: {dep_ontime:.1f}% on-time")
        
        if data.get("arrivals"):
            arr_ontime = monitor.calculate_ontime_percentage(data["arrivals"])
            print(f"{airport} Arrivals: {arr_ontime:.1f}% on-time")

# Configuration for Replit
def setup_replit():
    """
    Setup instructions for Replit
    """
    print("=== FlightAware Integration Setup for Replit ===")
    print("1. Get your API key from https://flightaware.com/commercial/aeroapi/")
    print("2. In Replit, go to the 'Secrets' tab (lock icon)")
    print("3. Add a new secret with key: FLIGHTAWARE_API_KEY")
    print("4. Paste your API key as the value")
    print("5. Run this script!")
    print("\nAPI Documentation: https://flightaware.com/commercial/aeroapi/documentation.rvt")

if __name__ == "__main__":
    setup_replit()
    main()