// airport_dashboard.tsx
// React + Tailwind dashboard displaying real-time scraped data for 10 airports

import React, { useEffect, useState } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Progress } from '@/components/ui/progress';
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer } from 'recharts';

interface Flight {
  Airport: string;
  Flight: string;
  Scheduled: string;
  Estimated: string;
  Status: string;
  Gate?: string;
  Weather?: string;
}

export default function AirportDashboard() {
  const [flights, setFlights] = useState<Flight[]>([]);
  const [delayStats, setDelayStats] = useState<{ total: number; delayed: number }>({ total: 0, delayed: 0 });
  const [reasonStats, setReasonStats] = useState<Record<string, number>>({});

  useEffect(() => {
    fetch('/airport_flight_data.csv')
      .then((response) => response.text())
      .then((data) => {
        const rows = data.split('\n').slice(1);
        const parsed = rows.map((row) => {
          const cols = row.split(',');
          return {
            Airport: cols[0],
            Flight: cols[2],
            Scheduled: cols[3],
            Estimated: cols[4],
            Status: cols[5],
            Gate: cols[6],
            Weather: cols[10]
          } as Flight;
        });
        const filtered = parsed.filter(f => f.Flight);
        setFlights(filtered);
        const delayed = filtered.filter(f => f.Status.toLowerCase().includes('delay')).length;
        setDelayStats({ total: filtered.length, delayed });

        const reasons: Record<string, number> = {};
        filtered.forEach(f => {
          if (f.Status.toLowerCase().includes('delay')) {
            const reason = f.Weather?.trim() || 'Unknown';
            reasons[reason] = (reasons[reason] || 0) + 1;
          }
        });
        setReasonStats(reasons);
      });
  }, []);

  const grouped = flights.reduce((acc, flight) => {
    acc[flight.Airport] = acc[flight.Airport] || [];
    acc[flight.Airport].push(flight);
    return acc;
  }, {} as Record<string, Flight[]>);

  const delayPercent = delayStats.total ? (delayStats.delayed / delayStats.total) * 100 : 0;
  const chartData = Object.entries(reasonStats).map(([reason, count]) => ({ reason, count }));

  return (
    <div className="p-4 space-y-6">
      <Card className="p-4">
        <h2 className="text-2xl font-bold mb-2">Overall Delay Rate</h2>
        <Progress value={delayPercent} className="h-4 mb-2" />
        <p className="text-sm text-gray-600">{delayStats.delayed} of {delayStats.total} flights delayed ({delayPercent.toFixed(1)}%)</p>
      </Card>

      <Card className="p-4">
        <h2 className="text-xl font-bold mb-4">Delay Reasons by Frequency</h2>
        <ResponsiveContainer width="100%" height={300}>
          <BarChart data={chartData} layout="vertical" margin={{ top: 5, right: 30, left: 100, bottom: 5 }}>
            <XAxis type="number" allowDecimals={false} />
            <YAxis dataKey="reason" type="category" width={150} />
            <Tooltip />
            <Bar dataKey="count" fill="#8884d8" />
          </BarChart>
        </ResponsiveContainer>
      </Card>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {Object.entries(grouped).map(([airport, flights]) => (
          <Card key={airport} className="shadow-md rounded-2xl">
            <CardContent className="p-4">
              <h2 className="text-xl font-bold mb-2">{airport}</h2>
              <ScrollArea className="h-64">
                {flights.map((f, idx) => (
                  <div key={idx} className="mb-2 border-b pb-1">
                    <div className="flex justify-between items-center">
                      <span className="font-medium">{f.Flight}</span>
                      <Badge variant="outline">{f.Status}</Badge>
                    </div>
                    <div className="text-sm text-gray-600">
                      Scheduled: {f.Scheduled}<br />
                      Estimated: {f.Estimated}<br />
                      {f.Gate && <>Gate: {f.Gate}<br /></>}
                      {f.Weather && <span>Reason: {f.Weather}</span>}
                    </div>
                  </div>
                ))}
              </ScrollArea>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}