# routes/faa_comparator.py
from fastapi import APIRouter
from ml_training_set import generate_training_dataset_with_weather
from train_faa_model import train_faa_models, seasonal_baseline_forecast

router = APIRouter()

@router.get("/api/faa-comparator")
def faa_comparator():
    # Generate datasets
    df = generate_training_dataset_with_weather()
    seasonal_df = seasonal_baseline_forecast(df)
    latest_month = df.sort_values(["year", "month"], ascending=False).groupby("airport").first().reset_index()

    # Train models and get predictions
    models = train_faa_models()
    delay_model = models["model_objects"]["delay_model"]
    otp_model = models["model_objects"]["otp_model"]
    risk_model = models["model_objects"]["risk_model"]
    encoder = models["model_objects"]["label_encoder"]

    output = []

    for _, row in latest_month.iterrows():
        airport = row["airport"]
        features = row.drop(["total_delay", "otp_percent", "delay_risk_category", "faa"], errors="ignore").to_frame().T
        delay_pred = float(delay_model.predict(features)[0])
        otp_pred = float(otp_model.predict(features)[0])
        risk_pred = encoder.inverse_transform(risk_model.predict(features))[0]

        baseline = seasonal_df[(seasonal_df["airport"] == airport) & (seasonal_df["month"] == row["month"])]
        baseline_row = baseline.iloc[0].to_dict() if not baseline.empty else {}

        output.append({
            "airport": airport,
            "month": row["month"],
            "year": row["year"],
            "actual_delay": float(row["total_delay"]),
            "actual_otp": float(row["otp_percent"]),
            "actual_risk": row["delay_risk_category"],
            "predicted_delay": delay_pred,
            "predicted_otp": otp_pred,
            "predicted_risk": risk_pred,
            "baseline_delay": baseline_row.get("total_delay"),
            "baseline_otp": baseline_row.get("otp_percent"),
            "baseline_risk": baseline_row.get("delay_risk_category"),
            "storm_days": row.get("thunderstorm_days"),
            "snow_days": row.get("snow_days"),
            "precip_mm": row.get("total_precip_mm"),
        })

    return output