import requests
import json
import os
from datetime import datetime
from typing import Dict, List, Optional

class AviationDataFetcher:
    """
    Aviation data fetcher for operations center platform
    Integrates with multiple free aviation APIs
    """
    
    def __init__(self):
        # API Keys (set these as environment variables in Replit)
        self.aviationstack_key = os.getenv('AVIATIONSTACK_API_KEY')
        self.aerodatabox_key = os.getenv('AERODATABOX_API_KEY')
        
        # API Base URLs
        self.aviationstack_base = "http://api.aviationstack.com/v1"
        self.aerodatabox_base = "https://aerodatabox.p.rapidapi.com"
        self.airportdb_base = "https://api.airportdb.io/v1"
        
        # Request headers
        self.aerodatabox_headers = {
            "X-RapidAPI-Key": self.aerodatabox_key,
            "X-RapidAPI-Host": "aerodatabox.p.rapidapi.com"
        }

    def get_flight_data(self, flight_iata: str = None, dep_iata: str = None, 
                       arr_iata: str = None, limit: int = 10) -> Dict:
        """
        Get real-time flight data from AviationStack API
        
        Args:
            flight_iata: Flight number (e.g., 'AA100')
            dep_iata: Departure airport IATA code
            arr_iata: Arrival airport IATA code
            limit: Number of results to return
        """
        if not self.aviationstack_key:
            return {"error": "AviationStack API key not configured"}
            
        url = f"{self.aviationstack_base}/flights"
        params = {
            'access_key': self.aviationstack_key,
            'limit': limit
        }
        
        if flight_iata:
            params['flight_iata'] = flight_iata
        if dep_iata:
            params['dep_iata'] = dep_iata
        if arr_iata:
            params['arr_iata'] = arr_iata
            
        try:
            response = requests.get(url, params=params)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            return {"error": f"API request failed: {str(e)}"}

    def get_airport_info(self, iata_code: str) -> Dict:
        """
        Get airport information from AirportDB (free API)
        
        Args:
            iata_code: Airport IATA code (e.g., 'LAX')
        """
        url = f"{self.airportdb_base}/airport/{iata_code.upper()}"
        
        try:
            response = requests.get(url)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            return {"error": f"Airport data request failed: {str(e)}"}

    def get_runway_data(self, airport_iata: str) -> Dict:
        """
        Get runway information from AeroDataBox API
        Note: This requires RapidAPI subscription (has free tier)
        
        Args:
            airport_iata: Airport IATA code
        """
        if not self.aerodatabox_key:
            return {"error": "AeroDataBox API key not configured"}
            
        url = f"{self.aerodatabox_base}/airports/iata/{airport_iata.upper()}"
        
        try:
            response = requests.get(url, headers=self.aerodatabox_headers)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            return {"error": f"Runway data request failed: {str(e)}"}

    def estimate_fuel_burn(self, aircraft_type: str, distance_nm: float, 
                          passengers: int = 150) -> Dict:
        """
        Estimate fuel burn based on aircraft type and distance
        This is a simplified calculation - real fuel burn depends on many factors
        
        Args:
            aircraft_type: Aircraft model (e.g., 'B737', 'A320')
            distance_nm: Distance in nautical miles
            passengers: Number of passengers (affects weight)
        """
        # Simplified fuel burn rates (gallons per nautical mile)
        fuel_rates = {
            'B737': 5.2,
            'A320': 5.5,
            'B777': 12.5,
            'A330': 11.8,
            'B747': 16.2,
            'A380': 20.1,
            'E190': 3.8,
            'CRJ9': 2.4
        }
        
        base_rate = fuel_rates.get(aircraft_type.upper(), 6.0)  # Default rate
        
        # Adjust for passenger load (simplified calculation)
        load_factor = 1 + (passengers - 150) * 0.001
        adjusted_rate = base_rate * load_factor
        
        estimated_fuel = distance_nm * adjusted_rate
        
        return {
            "aircraft_type": aircraft_type,
            "distance_nm": distance_nm,
            "passengers": passengers,
            "fuel_burn_gallons": round(estimated_fuel, 2),
            "fuel_burn_liters": round(estimated_fuel * 3.78541, 2),
            "note": "This is a simplified estimation. Actual fuel burn varies significantly based on weather, altitude, weight, and other factors."
        }

    def get_operations_summary(self, airport_iata: str, flight_number: str = None) -> Dict:
        """
        Get comprehensive operations data for a specific airport/flight
        
        Args:
            airport_iata: Airport IATA code
            flight_number: Optional specific flight number
        """
        summary = {
            "timestamp": datetime.now().isoformat(),
            "airport_code": airport_iata.upper(),
            "airport_info": {},
            "runway_data": {},
            "flight_data": {},
            "fuel_estimates": {}
        }
        
        # Get airport information
        print(f"Fetching airport data for {airport_iata}...")
        summary["airport_info"] = self.get_airport_info(airport_iata)
        
        # Get runway data
        print(f"Fetching runway data for {airport_iata}...")
        summary["runway_data"] = self.get_runway_data(airport_iata)
        
        # Get flight data
        print(f"Fetching flight data for {airport_iata}...")
        if flight_number:
            summary["flight_data"] = self.get_flight_data(flight_iata=flight_number)
        else:
            summary["flight_data"] = self.get_flight_data(dep_iata=airport_iata, limit=5)
        
        return summary

def main():
    """
    Example usage of the Aviation Data Fetcher
    """
    fetcher = AviationDataFetcher()
    
    print("=== Aviation Operations Center Data Fetcher ===\n")
    
    # Example 1: Get airport information
    print("1. Airport Information (LAX):")
    airport_data = fetcher.get_airport_info("LAX")
    print(json.dumps(airport_data, indent=2))
    print()
    
    # Example 2: Get flight data
    print("2. Flight Data (departing from LAX):")
    flight_data = fetcher.get_flight_data(dep_iata="LAX", limit=3)
    print(json.dumps(flight_data, indent=2))
    print()
    
    # Example 3: Fuel burn estimation
    print("3. Fuel Burn Estimation:")
    fuel_estimate = fetcher.estimate_fuel_burn("B737", 500, 160)
    print(json.dumps(fuel_estimate, indent=2))
    print()
    
    # Example 4: Operations summary
    print("4. Operations Summary for JFK:")
    ops_summary = fetcher.get_operations_summary("JFK")
    print(json.dumps(ops_summary, indent=2))

if __name__ == "__main__":
    main()

# Setup instructions for Replit:
"""
1. Create these environment variables in your Replit secrets:
   - AVIATIONSTACK_API_KEY: Get free key from aviationstack.com
   - AERODATABOX_API_KEY: Get free key from rapidapi.com (AeroDataBox)

2. Install required packages by creating requirements.txt with:
   requests

3. Run this script to test the API integrations

4. Modify the functions to match your specific operational needs
"""