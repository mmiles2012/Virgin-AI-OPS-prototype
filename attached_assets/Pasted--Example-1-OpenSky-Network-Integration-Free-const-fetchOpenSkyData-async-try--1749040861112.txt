// Example 1: OpenSky Network Integration (Free)
const fetchOpenSkyData = async () => {
  try {
    // Get all Virgin Atlantic aircraft (icao24 codes would need to be known)
    const response = await fetch('https://opensky-network.org/api/states/all');
    const data = await response.json();
    
    // Filter for Virgin Atlantic aircraft (would need ICAO codes)
    const virginAtlanticICAO = ['40068B', '4006A5', '400684']; // Example codes
    
    const virginAtlanticFlights = data.states
      .filter(state => virginAtlanticICAO.includes(state[0]))
      .map(state => ({
        id: state[0], // ICAO24
        callSign: state[1]?.trim() || 'Unknown',
        airline: 'Virgin Atlantic',
        position: {
          lat: state[6],
          lon: state[5],
          altitude: state[7] ? state[7] * 3.28084 : 0 // Convert m to ft
        },
        speed: state[9] ? state[9] * 1.94384 : 0, // Convert m/s to knots
        heading: state[10] || 0,
        status: state[8] ? 'Climbing' : 'Level'
      }));
    
    return virginAtlanticFlights;
  } catch (error) {
    console.error('Error fetching OpenSky data:', error);
    return [];
  }
};

// Example 2: FlightAware API Integration (Commercial)
const fetchFlightAwareData = async (apiKey) => {
  try {
    const response = await fetch('https://aeroapi.flightaware.com/aeroapi/operators/VIR/flights', {
      headers: {
        'x-apikey': apiKey
      }
    });
    
    const data = await response.json();
    
    return data.flights.map(flight => ({
      id: flight.fa_flight_id,
      callSign: flight.ident,
      airline: 'Virgin Atlantic',
      aircraft: flight.aircraft_type,
      registration: flight.registration,
      origin: flight.origin?.code,
      destination: flight.destination?.code,
      status: flight.status,
      position: {
        lat: flight.last_position?.latitude,
        lon: flight.last_position?.longitude,
        altitude: flight.last_position?.altitude
      },
      departureTime: flight.scheduled_out,
      arrivalTime: flight.scheduled_in
    }));
  } catch (error) {
    console.error('Error fetching FlightAware data:', error);
    return [];
  }
};

// Example 3: WebSocket Real-time Data
const connectToRealTimeData = (onDataUpdate) => {
  const ws = new WebSocket('wss://your-aviation-data-provider.com/stream');
  
  ws.onmessage = (event) => {
    const aircraftUpdate = JSON.parse(event.data);
    
    // Filter for Virgin Atlantic only
    if (aircraftUpdate.airline === 'Virgin Atlantic') {
      onDataUpdate(aircraftUpdate);
    }
  };
  
  ws.onerror = (error) => {
    console.error('WebSocket error:', error);
  };
  
  return ws;
};

// Example 4: Integrating with your existing system
const AircraftDataProvider = ({ children }) => {
  const [aircraftList, setAircraftList] = useState([]);
  const [selectedAircraft, setSelectedAircraft] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  
  // Fetch real data on component mount
  useEffect(() => {
    const loadRealData = async () => {
      setIsLoading(true);
      try {
        // Choose your data source
        const realData = await fetchOpenSkyData();
        // OR const realData = await fetchFlightAwareData('your-api-key');
        
        setAircraftList(realData);
      } catch (error) {
        console.error('Failed to load aircraft data:', error);
        // Fallback to mock data
        setAircraftList(mockAircraftData);
      } finally {
        setIsLoading(false);
      }
    };
    
    loadRealData();
    
    // Set up polling for updates every 30 seconds
    const interval = setInterval(loadRealData, 30000);
    
    return () => clearInterval(interval);
  }, []);
  
  // Set up WebSocket for real-time updates
  useEffect(() => {
    const ws = connectToRealTimeData((update) => {
      setAircraftList(prev => 
        prev.map(aircraft => 
          aircraft.id === update.id 
            ? { ...aircraft, ...update }
            : aircraft
        )
      );
    });
    
    return () => ws.close();
  }, []);
  
  // Rest of your provider code...
};

// Example 5: Data transformation utilities
const transformOpenSkyToStandardFormat = (openSkyState) => {
  return {
    id: openSkyState[0],
    callSign: openSkyState[1]?.trim(),
    airline: 'Virgin Atlantic', // You'd determine this from ICAO codes
    position: {
      lat: openSkyState[6],
      lon: openSkyState[5],
      altitude: openSkyState[7] ? Math.round(openSkyState[7] * 3.28084) : 0
    },
    speed: openSkyState[9] ? Math.round(openSkyState[9] * 1.94384) : 0,
    heading: openSkyState[10] || 0,
    lastUpdate: new Date(openSkyState[3] * 1000).toISOString(),
    status: determineFlightStatus(openSkyState)
  };
};

const determineFlightStatus = (state) => {
  const verticalRate = state[11];
  if (verticalRate > 1) return 'Climbing';
  if (verticalRate < -1) return 'Descending';
  return 'Cruising';
};

// Example 6: Error handling and fallbacks
const fetchDataWithFallback = async () => {
  const dataSources = [
    () => fetchFlightAwareData(process.env.FLIGHTAWARE_API_KEY),
    () => fetchOpenSkyData(),
    () => Promise.resolve(mockAircraftData) // Fallback to mock data
  ];
  
  for (const fetchFunction of dataSources) {
    try {
      const data = await fetchFunction();
      if (data && data.length > 0) {
        return data;
      }
    } catch (error) {
      console.warn('Data source failed, trying next...', error);
    }
  }
  
  throw new Error('All data sources failed');
};