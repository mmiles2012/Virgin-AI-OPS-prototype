# main.py - Aviation Operations Platform
#!/usr/bin/env python3
"""
Aviation Operations Platform with ML News Intelligence
Complete Replit deployment
"""

import os
import json
import sqlite3
import requests
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from typing import List, Dict, Tuple, Optional
import re
from dataclasses import dataclass, asdict
from flask import Flask, render_template_string, request, jsonify
import threading
import time
from collections import defaultdict
import logging
import asyncio
from concurrent.futures import ThreadPoolExecutor

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class NewsArticle:
    """Data structure for news articles"""
    title: str
    content: str
    url: str
    source: str
    published_at: str
    relevance_score: float = 0.0
    categories: List[str] = None
    entities: Dict[str, List[str]] = None
    sentiment: float = 0.0

    def __post_init__(self):
        if self.categories is None:
            self.categories = []
        if self.entities is None:
            self.entities = {}

class AviationNewsClassifier:
    """ML classifier for aviation-relevant news"""
    
    def __init__(self):
        self.categories = [
            'direct_aviation', 'energy', 'economics', 'currency', 
            'geopolitics', 'military', 'weather', 'regulation'
        ]
        
        # Aviation-specific keywords and entities
        self.aviation_keywords = {
            'direct_aviation': [
                'airline', 'aircraft', 'airport', 'aviation', 'flight', 'pilot', 'crew',
                'boeing', 'airbus', 'embraer', 'bombardier', 'delta', 'united', 'american',
                'lufthansa', 'emirates', 'qatar airways', 'singapore airlines', 'cathay pacific',
                'faa', 'icao', 'iata', 'terminal', 'runway', 'atc', 'air traffic control',
                'passenger', 'cargo', 'fleet', 'route', 'capacity', 'load factor', 'hub',
                'maintenance', 'mechanic', 'hangar', 'gate', 'boarding', 'takeoff', 'landing'
            ],
            'energy': [
                'oil price', 'fuel cost', 'jet fuel', 'crude oil', 'opec', 'energy crisis',
                'fuel efficiency', 'sustainable aviation fuel', 'saf', 'biofuel', 'kerosene',
                'fuel surcharge', 'energy prices', 'petroleum', 'refinery', 'barrel'
            ],
            'economics': [
                'gdp', 'inflation', 'recession', 'economic growth', 'interest rates',
                'federal reserve', 'unemployment', 'consumer spending', 'business travel',
                'revenue', 'profit', 'loss', 'earnings', 'stock price', 'market cap',
                'bankruptcy', 'merger', 'acquisition', 'ipo', 'financial results'
            ],
            'currency': [
                'dollar', 'usd', 'exchange rate', 'currency', 'forex', 'devaluation',
                'euro', 'yen', 'pound', 'rmb', 'yuan', 'cad', 'aud', 'hedging',
                'currency fluctuation', 'strong dollar', 'weak dollar'
            ],
            'geopolitics': [
                'sanctions', 'trade war', 'diplomatic', 'border', 'visa', 'travel ban',
                'international relations', 'conflict', 'peace treaty', 'alliance',
                'embargo', 'tariff', 'bilateral agreement', 'airspace rights',
                'open skies', 'aviation agreement', 'diplomatic immunity'
            ],
            'military': [
                'defense', 'military aircraft', 'fighter jet', 'air force', 'nato',
                'defense contract', 'military spending', 'airspace', 'no-fly zone',
                'military transport', 'drone', 'surveillance', 'reconnaissance'
            ],
            'weather': [
                'hurricane', 'storm', 'weather', 'climate', 'volcanic ash',
                'extreme weather', 'flight delay', 'cancellation', 'turbulence',
                'lightning', 'fog', 'wind shear', 'ice', 'snow', 'thunderstorm'
            ],
            'regulation': [
                'regulation', 'safety', 'compliance', 'certification', 'faa approval',
                'airworthiness', 'maintenance', 'inspection', 'aviation law',
                'safety directive', 'ad', 'airworthiness directive', 'mandate',
                'fine', 'penalty', 'investigation', 'audit', 'violation'
            ]
        }
        
        self.importance_weights = {
            'direct_aviation': 1.0,
            'energy': 0.8,
            'economics': 0.7,
            'currency': 0.7,
            'geopolitics': 0.6,
            'military': 0.5,
            'weather': 0.4,
            'regulation': 0.9
        }

    def calculate_relevance_score(self, article: NewsArticle) -> float:
        """Calculate overall relevance score for an article"""
        score = 0.0
        text = f"{article.title} {article.content}".lower()
        
        # Category-based scoring
        for category, keywords in self.aviation_keywords.items():
            category_score = 0
            for keyword in keywords:
                if keyword in text:
                    # Give more weight to title matches
                    if keyword in article.title.lower():
                        category_score += 2
                    else:
                        category_score += 1
                        
            weight = self.importance_weights.get(category, 0.5)
            score += category_score * weight
        
        # Bonus for multiple category matches
        matching_categories = len(self.classify_categories(article))
        if matching_categories > 1:
            score *= (1 + matching_categories * 0.1)
            
        # Normalize score (approximate)
        return min(score * 5, 100)  # Scale to 0-100

    def classify_categories(self, article: NewsArticle) -> List[str]:
        """Classify article into relevant categories"""
        text = f"{article.title} {article.content}".lower()
        relevant_categories = []
        
        for category, keywords in self.aviation_keywords.items():
            matches = sum(1 for keyword in keywords if keyword in text)
            if matches > 0:
                relevant_categories.append(category)
                
        return relevant_categories

class NewsAggregator:
    """Aggregates news from multiple sources"""
    
    def __init__(self):
        self.api_key = os.getenv('NEWS_API_KEY', '')

    def fetch_news(self, query: str = 'aviation OR airline OR aircraft', hours_back: int = 24) -> List[NewsArticle]:
        """Fetch news from configured sources"""
        articles = []
        
        # Try to fetch from NewsAPI if key is available
        if self.api_key and self.api_key != '':
            try:
                articles.extend(self._fetch_from_newsapi(query, hours_back))
            except Exception as e:
                logger.error(f"Error fetching from NewsAPI: {e}")
        
        # Always include mock data for demo
        articles.extend(self._generate_mock_articles())
        
        return articles

    def _fetch_from_newsapi(self, query: str, hours_back: int) -> List[NewsArticle]:
        """Fetch from NewsAPI"""
        articles = []
        
        params = {
            'q': query,
            'from': (datetime.now() - timedelta(hours=hours_back)).isoformat(),
            'sortBy': 'publishedAt',
            'apiKey': self.api_key,
            'language': 'en',
            'pageSize': 50
        }
        
        try:
            response = requests.get('https://newsapi.org/v2/everything', params=params, timeout=10)
            data = response.json()
            
            if data.get('status') == 'ok':
                for item in data.get('articles', []):
                    if item.get('title') and item.get('description'):
                        article = NewsArticle(
                            title=item['title'],
                            content=item.get('description', '') + ' ' + (item.get('content', '') or ''),
                            url=item.get('url', ''),
                            source=item.get('source', {}).get('name', 'Unknown'),
                            published_at=item['publishedAt']
                        )
                        articles.append(article)
        except Exception as e:
            logger.error(f"NewsAPI error: {e}")
            
        return articles

    def _generate_mock_articles(self) -> List[NewsArticle]:
        """Generate mock articles for demo"""
        mock_articles = [
            {
                'title': 'Boeing 737 MAX Returns to Full Service After Comprehensive Safety Review',
                'content': 'Boeing has announced the complete return of its 737 MAX aircraft to commercial service following extensive safety modifications, pilot training updates, and regulatory approval from the FAA. Airlines worldwide are now confident in operating the aircraft with enhanced safety protocols.',
                'source': 'Aviation Weekly',
                'hours_ago': 2
            },
            {
                'title': 'Crude Oil Prices Surge 18% Amid Middle East Supply Concerns',
                'content': 'Oil prices have jumped significantly due to geopolitical tensions affecting major shipping routes, potentially impacting airline fuel costs by $2-3 billion industry-wide. Airlines are implementing fuel surcharges and reviewing hedging strategies.',
                'source': 'Energy Market News',
                'hours_ago': 4
            },
            {
                'title': 'US Dollar Reaches 2-Year High Against Euro, Affecting International Airlines',
                'content': 'The strengthening US Dollar has created both opportunities and challenges for international carriers. US airlines benefit from lower international costs, while foreign carriers face increased expenses for dollar-denominated services.',
                'source': 'Financial Aviation Report',
                'hours_ago': 6
            },
            {
                'title': 'New ICAO Emissions Standards Set to Transform Aviation Industry',
                'content': 'The International Civil Aviation Organization has implemented stricter CO2 emissions standards for commercial aircraft, requiring airlines to invest heavily in fuel-efficient technologies and sustainable aviation fuels by 2030.',
                'source': 'Aviation Regulation Today',
                'hours_ago': 8
            },
            {
                'title': 'Hurricane Season Disrupts 3,500 Flights Across Eastern Seaboard',
                'content': 'Major storm systems have forced airlines to cancel thousands of flights, with Atlanta, Miami, and New York airports most affected. Airlines are waiving change fees and deploying larger aircraft to handle rebooking demand.',
                'source': 'Weather Impact Aviation',
                'hours_ago': 12
            },
            {
                'title': 'Airbus Secures $45B Order from Emirates for A350 and A380 Aircraft',
                'content': 'Emirates Airlines has placed one of the largest commercial aircraft orders in history, signaling strong confidence in long-haul travel recovery. The order includes 80 A350-1000s and 30 A380s with delivery starting in 2025.',
                'source': 'Commercial Aviation News',
                'hours_ago': 18
            },
            {
                'title': 'Federal Reserve Rate Decision Impacts Aviation Leasing Market',
                'content': 'The Fed\'s latest interest rate decision has significant implications for aircraft leasing companies and airlines considering fleet expansion. Higher rates may slow new aircraft deliveries but strengthen the dollar for US carriers.',
                'source': 'Aviation Finance Weekly',
                'hours_ago': 20
            },
            {
                'title': 'China Reopens Airspace Routes After Military Exercise Restrictions',
                'content': 'Following a week-long military exercise, China has reopened key international air corridors, allowing normal flight operations to resume. The restrictions had caused significant delays and route diversions for Asian carriers.',
                'source': 'Asia Pacific Aviation',
                'hours_ago': 24
            }
        ]
        
        articles = []
        for i, mock in enumerate(mock_articles):
            published_time = datetime.now() - timedelta(hours=mock['hours_ago'])
            article = NewsArticle(
                title=mock['title'],
                content=mock['content'],
                url=f"https://example.com/article-{i+1}",
                source=mock['source'],
                published_at=published_time.isoformat()
            )
            articles.append(article)
            
        return articles

class DatabaseManager:
    """Manages SQLite database operations"""
    
    def __init__(self, db_path: str = 'aviation_ops.db'):
        self.db_path = db_path
        self.init_database()

    def init_database(self):
        """Initialize database tables"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Articles table
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS articles (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT NOT NULL,
                content TEXT,
                url TEXT,
                source TEXT,
                published_at TEXT,
                relevance_score REAL,
                categories TEXT,
                entities TEXT,
                sentiment REAL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Create index for better performance
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_relevance_score ON articles(relevance_score)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_created_at ON articles(created_at)')
        
        conn.commit()
        conn.close()

    def save_article(self, article: NewsArticle):
        """Save article to database"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Check if article already exists (by title)
        cursor.execute('SELECT id FROM articles WHERE title = ?', (article.title,))
        if cursor.fetchone():
            conn.close()
            return  # Skip duplicate
        
        cursor.execute('''
            INSERT INTO articles 
            (title, content, url, source, published_at, relevance_score, categories, entities, sentiment)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            article.title,
            article.content,
            article.url,
            article.source,
            article.published_at,
            article.relevance_score,
            json.dumps(article.categories),
            json.dumps(article.entities),
            article.sentiment
        ))
        
        conn.commit()
        conn.close()

    def get_articles(self, limit: int = 50, min_relevance: float = 0.0, category: str = '') -> List[Dict]:
        """Retrieve articles from database"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        base_query = '''
            SELECT * FROM articles 
            WHERE relevance_score >= ?
        '''
        params = [min_relevance]
        
        if category:
            base_query += ' AND categories LIKE ?'
            params.append(f'%"{category}"%')
            
        base_query += ' ORDER BY relevance_score DESC, published_at DESC LIMIT ?'
        params.append(limit)
        
        cursor.execute(base_query, params)
        
        columns = [description[0] for description in cursor.description]
        articles = [dict(zip(columns, row)) for row in cursor.fetchall()]
        
        # Parse JSON fields
        for article in articles:
            try:
                article['categories'] = json.loads(article.get('categories', '[]'))
                article['entities'] = json.loads(article.get('entities', '{}'))
            except:
                article['categories'] = []
                article['entities'] = {}
            
        conn.close()
        return articles

    def get_analytics(self) -> Dict:
        """Get analytics data"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Get basic stats
        cursor.execute('SELECT COUNT(*), AVG(relevance_score) FROM articles WHERE DATE(created_at) = DATE("now")')
        today_stats = cursor.fetchone()
        
        cursor.execute('SELECT COUNT(*), AVG(relevance_score) FROM articles')
        total_stats = cursor.fetchone()
        
        # Get category distribution
        cursor.execute('SELECT categories FROM articles WHERE categories != "[]" AND categories IS NOT NULL')
        all_categories = []
        for row in cursor.fetchall():
            try:
                cats = json.loads(row[0])
                all_categories.extend(cats)
            except:
                continue
            
        category_counts = defaultdict(int)
        for cat in all_categories:
            category_counts[cat] += 1
            
        conn.close()
        
        return {
            'today_articles': today_stats[0] or 0,
            'today_avg_relevance': round(today_stats[1] or 0, 2),
            'total_articles': total_stats[0] or 0,
            'total_avg_relevance': round(total_stats[1] or 0, 2),
            'category_distribution': dict(category_counts)
        }

    def clear_old_articles(self, days_old: int = 7):
        """Clear articles older than specified days"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cutoff_date = datetime.now() - timedelta(days=days_old)
        cursor.execute('DELETE FROM articles WHERE created_at < ?', (cutoff_date.isoformat(),))
        
        conn.commit()
        conn.close()

# HTML Templates
DASHBOARD_TEMPLATE = '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Aviation Operations Dashboard</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .header { 
            background: rgba(255,255,255,0.1); 
            backdrop-filter: blur(10px);
            color: white; 
            padding: 2rem; 
            text-align: center;
            border-bottom: 1px solid rgba(255,255,255,0.2);
        }
        .header h1 { font-size: 2.5rem; margin-bottom: 0.5rem; }
        .header p { opacity: 0.9; font-size: 1.1rem; }
        
        .nav { 
            background: rgba(255,255,255,0.95); 
            padding: 1rem 2rem; 
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 20px rgba(0,0,0,0.1);
        }
        .nav-links a { 
            text-decoration: none; 
            color: #4a5568; 
            margin-right: 2rem; 
            font-weight: 600;
            transition: color 0.3s;
        }
        .nav-links a:hover { color: #667eea; }
        
        .refresh-btn { 
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white; 
            border: none; 
            padding: 0.8rem 1.5rem; 
            border-radius: 25px;
            cursor: pointer; 
            font-weight: 600;
            transition: transform 0.2s;
        }
        .refresh-btn:hover { transform: translateY(-2px); }
        
        .container { max-width: 1200px; margin: 0 auto; padding: 2rem; }
        
        .stats-grid { 
            display: grid; 
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); 
            gap: 2rem; 
            margin-bottom: 3rem; 
        }
        .stat-card { 
            background: rgba(255,255,255,0.95); 
            padding: 2.5rem; 
            border-radius: 20px; 
            text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            transition: transform 0.3s;
        }
        .stat-card:hover { transform: translateY(-5px); }
        .stat-number { 
            font-size: 3rem; 
            font-weight: 800; 
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 0.5rem;
        }
        .stat-label { color: #718096; font-weight: 500; font-size: 1.1rem; }
        
        .articles-section { 
            background: rgba(255,255,255,0.95); 
            border-radius: 20px; 
            padding: 3rem; 
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        .articles-section h2 { 
            font-size: 2rem; 
            margin-bottom: 2rem; 
            color: #2d3748;
            text-align: center;
        }
        
        .article-item { 
            border-left: 4px solid #667eea;
            background: #f7fafc;
            margin: 1.5rem 0;
            padding: 2rem;
            border-radius: 10px;
            transition: all 0.3s;
        }
        .article-item:hover { 
            transform: translateX(5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        .article-title { 
            font-size: 1.3rem; 
            font-weight: 700; 
            color: #2d3748; 
            margin-bottom: 1rem;
            line-height: 1.4;
        }
        .article-meta { 
            display: flex; 
            justify-content: space-between; 
            align-items: center; 
            margin-bottom: 1rem;
            flex-wrap: wrap;
            gap: 1rem;
        }
        .article-source { 
            color: #718096; 
            font-weight: 500;
        }
        .relevance-score { 
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white; 
            padding: 0.4rem 1.2rem; 
            border-radius: 20px; 
            font-weight: 600;
            font-size: 0.9rem;
        }
        
        .article-categories { margin-top: 1rem; }
        .category-tag { 
            display: inline-block; 
            background: linear-gradient(135deg, #e3f2fd, #bbdefb);
            color: #1565c0; 
            padding: 0.4rem 1rem; 
            border-radius: 15px; 
            font-size: 0.85rem; 
            margin-right: 0.8rem; 
            margin-bottom: 0.5rem;
            font-weight: 600;
        }
        
        .loading { 
            text-align: center; 
            padding: 2rem; 
            font-size: 1.1rem; 
            color: #718096; 
        }
        
        @media (max-width: 768px) {
            .container { padding: 1rem; }
            .nav { flex-direction: column; gap: 1rem; }
            .header h1 { font-size: 2rem; }
            .stat-number { font-size: 2.5rem; }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>✈️ Aviation Operations Intelligence</h1>
        <p>Real-time news analysis for aviation industry insights</p>
    </div>
    
    <div class="nav">
        <div class="nav-links">
            <a href="/">Dashboard</a>
            <a href="/articles">All Articles</a>
        </div>
        <button class="refresh-btn" onclick="refreshNews()">🔄 Refresh News</button>
    </div>
    
    <div class="container">
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number">{{ analytics.today_articles }}</div>
                <div class="stat-label">Articles Today</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{{ analytics.total_articles }}</div>
                <div class="stat-label">Total Articles</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{{ analytics.today_avg_relevance }}%</div>
                <div class="stat-label">Avg Relevance Today</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{{ (analytics.category_distribution|length) or 0 }}</div>
                <div class="stat-label">Active Categories</div>
            </div>
        </div>
        
        <div class="articles-section">
            <h2>📰 Latest High-Relevance Aviation News</h2>
            {% if articles %}
                {% for article in articles %}
                <div class="article-item">
                    <div class="article-title">{{ article.title }}</div>
                    <div class="article-meta">
                        <span class="article-source">{{ article.source }} • {{ article.published_at[:10] }}</span>
                        <span class="relevance-score">{{ "%.1f"|format(article.relevance_score) }}% relevant</span>
                    </div>
                    <div class="article-categories">
                        {% for category in article.categories %}
                        <span class="category-tag">{{ category.replace('_', ' ').title() }}</span>
                        {% endfor %}
                    </div>
                </div>
                {% endfor %}
            {% else %}
                <div class="loading">
                    <p>No articles found. Click "Refresh News" to fetch the latest aviation news.</p>
                </div>
            {% endif %}
        </div>
    </div>
    
    <script>
        function refreshNews() {
            const btn = document.querySelector('.refresh-btn');
            btn.innerHTML = '⏳ Loading...';
            btn.disabled = true;
            
            fetch('/api/refresh')
                .then(response => response.json())
                .then(data => {
                    alert(data.message);
                    if (data.status === 'success') {
                        location.reload();
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error refreshing news. Please try again.');
                })
                .finally(() => {
                    btn.innerHTML = '🔄 Refresh News';
                    btn.disabled = false;
                });
        }
        
        // Auto-refresh every 30 minutes
        setInterval(() => {
            fetch('/api/refresh').catch(console.error);
        }, 30 * 60 * 1000);
    </script>
</body>
</html>
'''

ARTICLES_TEMPLATE = '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Aviation News Articles</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .header { 
            background: rgba(255,255,255,0.1); 
            backdrop-filter: blur(10px);
            color: white; 
            padding: 2rem; 
            text-align: center;
            border-bottom: 1px solid rgba(255,255,255,0.2);
        }
        .nav { 
            background: rgba(255,255,255,0.95); 
            padding: 1rem 2rem; 
            box-shadow: 0 2px 20px rgba(0,0,0,0.1);
        }
        .nav a { 
            text-decoration: none; 
            color: #4a5568; 
            margin-right: 2rem; 
            font-weight: 600;
        }
        .nav a:hover { color: #667eea; }
        
        .container { max-width: 1200px; margin: 0 auto; padding: 2rem; }
        
        .filters { 
            background: rgba(255,255,255,0.95); 
            padding: 2rem; 
            border-radius: 20px; 
            margin-bottom: 2rem; 
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        .filters h3 { margin-bottom: 1.5rem; color: #2d3748; }
        .filter-group { 
            display: inline-block; 
            margin-right: 2rem; 
            margin-bottom: 1rem;
        }
        .filter-group label { 
            display: block; 
            margin-bottom: 0.5rem; 
            font-weight: 600; 
            color: #4a5568;
        }
        .filter-group input, .filter-group select { 
            padding: 0.8rem; 
            border: 2px solid #e2e8f0; 
            border-radius: 10px;
            background: white;
            font-size: 1rem;
        }
        .filter-group input:focus, .filter-group select:focus {
            outline: none;
            border-color: #667eea;
        }
        .apply-filters { 
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white; 
            border: none; 
            padding: 0.8rem 2rem; 
            border-radius: 25px;
            cursor: pointer; 
            font-weight: 600;
            margin-top: 1rem;
        }
        
        .articles-list { 
            background: rgba