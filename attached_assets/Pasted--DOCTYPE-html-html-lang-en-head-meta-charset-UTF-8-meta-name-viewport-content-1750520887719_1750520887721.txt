<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Airbus Digital Twins - Operations Center</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', system-ui, sans-serif;
            background: linear-gradient(135deg, #0f1419 0%, #1e2a3a 100%);
            color: #ffffff;
            overflow: hidden;
        }
        
        .ops-header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            height: 60px;
            background: rgba(15, 20, 25, 0.95);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(59, 130, 246, 0.3);
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 20px;
            z-index: 1000;
        }
        
        .logo {
            font-size: 20px;
            font-weight: 700;
            background: linear-gradient(45deg, #3b82f6, #06b6d4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .status-indicators {
            display: flex;
            gap: 20px;
            align-items: center;
        }
        
        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #10b981;
            box-shadow: 0 0 10px rgba(16, 185, 129, 0.5);
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        
        .main-container {
            position: fixed;
            top: 60px;
            left: 0;
            right: 0;
            bottom: 0;
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2px;
            background: #0f1419;
        }
        
        .aircraft-panel {
            background: rgba(30, 42, 58, 0.8);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(59, 130, 246, 0.2);
            position: relative;
            overflow: hidden;
        }
        
        .aircraft-header {
            position: absolute;
            top: 20px;
            left: 20px;
            right: 20px;
            z-index: 100;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .aircraft-title {
            font-size: 24px;
            font-weight: 600;
            color: #ffffff;
            text-shadow: 0 2px 4px rgba(0,0,0,0.5);
        }
        
        .aircraft-specs {
            display: flex;
            gap: 15px;
            font-size: 12px;
            color: #94a3b8;
        }
        
        .spec-item {
            background: rgba(15, 20, 25, 0.7);
            padding: 4px 8px;
            border-radius: 4px;
            border: 1px solid rgba(59, 130, 246, 0.3);
        }
        
        .controls-panel {
            position: absolute;
            bottom: 20px;
            left: 20px;
            right: 20px;
            background: rgba(15, 20, 25, 0.9);
            border: 1px solid rgba(59, 130, 246, 0.3);
            border-radius: 8px;
            padding: 15px;
            backdrop-filter: blur(10px);
        }
        
        .control-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        
        .control-row:last-child {
            margin-bottom: 0;
        }
        
        .control-label {
            font-size: 12px;
            color: #94a3b8;
            font-weight: 500;
        }
        
        .control-input {
            background: rgba(59, 130, 246, 0.1);
            border: 1px solid rgba(59, 130, 246, 0.3);
            border-radius: 4px;
            padding: 4px 8px;
            color: #ffffff;
            font-size: 11px;
            width: 80px;
        }
        
        .control-button {
            background: linear-gradient(45deg, #3b82f6, #06b6d4);
            border: none;
            border-radius: 4px;
            padding: 6px 12px;
            color: white;
            font-size: 11px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .control-button:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
        }
        
        .viewport {
            width: 100%;
            height: 100%;
        }
        
        .system-alerts {
            position: fixed;
            top: 80px;
            right: 20px;
            width: 300px;
            z-index: 1000;
        }
        
        .alert {
            background: rgba(16, 185, 129, 0.1);
            border: 1px solid rgba(16, 185, 129, 0.3);
            border-radius: 6px;
            padding: 12px;
            margin-bottom: 8px;
            font-size: 12px;
            animation: slideIn 0.5s ease;
        }
        
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        
        .performance-metrics {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: rgba(15, 20, 25, 0.9);
            border: 1px solid rgba(59, 130, 246, 0.3);
            border-radius: 8px;
            padding: 15px;
            backdrop-filter: blur(10px);
            font-size: 12px;
            min-width: 200px;
        }
        
        .metric-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }
        
        .metric-value {
            color: #10b981;
            font-weight: 600;
        }
    </style>
</head>
<body>
    <div class="ops-header">
        <div class="logo">AIRBUS OPS CENTER</div>
        <div class="status-indicators">
            <div class="status-dot"></div>
            <span style="font-size: 12px; color: #94a3b8;">System Operational</span>
            <div style="font-size: 12px; color: #94a3b8;" id="timestamp"></div>
        </div>
    </div>
    
    <div class="main-container">
        <div class="aircraft-panel">
            <div class="aircraft-header">
                <div class="aircraft-title">A350-1000</div>
                <div class="aircraft-specs">
                    <div class="spec-item">Range: 16,100km</div>
                    <div class="spec-item">Pax: 366</div>
                    <div class="spec-item">MTOW: 319t</div>
                </div>
            </div>
            <canvas class="viewport" id="a350-viewport"></canvas>
            <div class="controls-panel">
                <div class="control-row">
                    <span class="control-label">Altitude (ft)</span>
                    <input type="number" class="control-input" id="a350-altitude" value="37000">
                    <button class="control-button" onclick="updateA350()">Update</button>
                </div>
                <div class="control-row">
                    <span class="control-label">Speed (kts)</span>
                    <input type="number" class="control-input" id="a350-speed" value="480">
                    <button class="control-button" onclick="rotateA350()">Rotate View</button>
                </div>
            </div>
        </div>
        
        <div class="aircraft-panel">
            <div class="aircraft-header">
                <div class="aircraft-title">A330-300</div>
                <div class="aircraft-specs">
                    <div class="spec-item">Range: 11,750km</div>
                    <div class="spec-item">Pax: 295</div>
                    <div class="spec-item">MTOW: 242t</div>
                </div>
            </div>
            <canvas class="viewport" id="a330-viewport"></canvas>
            <div class="controls-panel">
                <div class="control-row">
                    <span class="control-label">Altitude (ft)</span>
                    <input type="number" class="control-input" id="a330-altitude" value="39000">
                    <button class="control-button" onclick="updateA330()">Update</button>
                </div>
                <div class="control-row">
                    <span class="control-label">Speed (kts)</span>
                    <input type="number" class="control-input" id="a330-speed" value="460">
                    <button class="control-button" onclick="rotateA330()">Rotate View</button>
                </div>
            </div>
        </div>
    </div>
    
    <div class="system-alerts">
        <div class="alert">✓ A350-1000 Systems Nominal</div>
        <div class="alert">✓ A330-300 Flight Data Updated</div>
    </div>
    
    <div class="performance-metrics">
        <div style="font-weight: 600; margin-bottom: 8px; color: #3b82f6;">Fleet Status</div>
        <div class="metric-row">
            <span>Active Aircraft:</span>
            <span class="metric-value">2</span>
        </div>
        <div class="metric-row">
            <span>System Load:</span>
            <span class="metric-value">12%</span>
        </div>
        <div class="metric-row">
            <span>Data Refresh:</span>
            <span class="metric-value">Real-time</span>
        </div>
    </div>

    <script>
        // Global variables
        let a350Scene, a350Camera, a350Renderer, a350Aircraft;
        let a330Scene, a330Camera, a330Renderer, a330Aircraft;
        let animationId;
        
        // Initialize timestamp
        function updateTimestamp() {
            const now = new Date();
            document.getElementById('timestamp').textContent = now.toLocaleTimeString();
        }
        setInterval(updateTimestamp, 1000);
        updateTimestamp();
        
        // Create aircraft geometry
        function createAircraftGeometry(isA350 = true) {
            const group = new THREE.Group();
            
            // Fuselage - A350-1000 is longer than A350-900
            const fuselageGeometry = new THREE.CylinderGeometry(
                isA350 ? 2.5 : 2.3, 
                isA350 ? 2.5 : 2.3, 
                isA350 ? 26 : 20, // A350-1000 is significantly longer (73.8m vs 63.7m for A330)
                16
            );
            const fuselageMaterial = new THREE.MeshPhongMaterial({ 
                color: isA350 ? 0x2563eb : 0x059669,
                shininess: 100 
            });
            const fuselage = new THREE.Mesh(fuselageGeometry, fuselageMaterial);
            fuselage.rotation.z = Math.PI / 2;
            group.add(fuselage);
            
            // Wings - A350-1000 has same wingspan as A350-900
            const wingGeometry = new THREE.BoxGeometry(isA350 ? 25 : 22, 0.5, 4);
            const wingMaterial = new THREE.MeshPhongMaterial({ 
                color: 0x1e293b,
                shininess: 80 
            });
            const wings = new THREE.Mesh(wingGeometry, wingMaterial);
            group.add(wings);
            
            // Engines
            const engineGeometry = new THREE.CylinderGeometry(1, 1, 3, 12);
            const engineMaterial = new THREE.MeshPhongMaterial({ 
                color: 0x374151,
                shininess: 120 
            });
            
            const leftEngine = new THREE.Mesh(engineGeometry, engineMaterial);
            leftEngine.position.set(-8, -1.5, 0);
            leftEngine.rotation.z = Math.PI / 2;
            group.add(leftEngine);
            
            const rightEngine = new THREE.Mesh(engineGeometry, engineMaterial);
            rightEngine.position.set(8, -1.5, 0);
            rightEngine.rotation.z = Math.PI / 2;
            group.add(rightEngine);
            
            // Tail - positioned further back for A350-1000
            const tailGeometry = new THREE.BoxGeometry(3, 8, 0.5);
            const tailMaterial = new THREE.MeshPhongMaterial({ 
                color: isA350 ? 0x2563eb : 0x059669,
                shininess: 100 
            });
            const tail = new THREE.Mesh(tailGeometry, tailMaterial);
            tail.position.set(isA350 ? -11 : -9, 2, 0); // Further back for longer fuselage
            group.add(tail);
            
            // Horizontal stabilizer
            const hStabGeometry = new THREE.BoxGeometry(8, 0.3, 2);
            const hStab = new THREE.Mesh(hStabGeometry, wingMaterial);
            hStab.position.set(isA350 ? -11 : -9, 0.5, 0); // Matches tail position
            group.add(hStab);
            
            return group;
        }
        
        // Initialize A350 scene
        function initA350() {
            const canvas = document.getElementById('a350-viewport');
            const rect = canvas.parentElement.getBoundingClientRect();
            
            a350Scene = new THREE.Scene();
            a350Scene.background = new THREE.Color(0x0f1419);
            
            a350Camera = new THREE.PerspectiveCamera(75, rect.width / rect.height, 0.1, 1000);
            a350Camera.position.set(15, 10, 15);
            a350Camera.lookAt(0, 0, 0);
            
            a350Renderer = new THREE.WebGLRenderer({ canvas, antialias: true });
            a350Renderer.setSize(rect.width, rect.height);
            a350Renderer.shadowMap.enabled = true;
            a350Renderer.shadowMap.type = THREE.PCFSoftShadowMap;
            
            // Lighting
            const ambientLight = new THREE.AmbientLight(0x404040, 0.6);
            a350Scene.add(ambientLight);
            
            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
            directionalLight.position.set(10, 10, 5);
            directionalLight.castShadow = true;
            a350Scene.add(directionalLight);
            
            const pointLight = new THREE.PointLight(0x3b82f6, 0.5);
            pointLight.position.set(-10, 5, 10);
            a350Scene.add(pointLight);
            
            // Create aircraft
            a350Aircraft = createAircraftGeometry(true);
            a350Aircraft.castShadow = true;
            a350Aircraft.receiveShadow = true;
            a350Scene.add(a350Aircraft);
            
            // Ground plane
            const groundGeometry = new THREE.PlaneGeometry(100, 100);
            const groundMaterial = new THREE.MeshLambertMaterial({ 
                color: 0x1e293b, 
                transparent: true, 
                opacity: 0.3 
            });
            const ground = new THREE.Mesh(groundGeometry, groundMaterial);
            ground.rotation.x = -Math.PI / 2;
            ground.position.y = -5;
            ground.receiveShadow = true;
            a350Scene.add(ground);
        }
        
        // Initialize A330 scene
        function initA330() {
            const canvas = document.getElementById('a330-viewport');
            const rect = canvas.parentElement.getBoundingClientRect();
            
            a330Scene = new THREE.Scene();
            a330Scene.background = new THREE.Color(0x0f1419);
            
            a330Camera = new THREE.PerspectiveCamera(75, rect.width / rect.height, 0.1, 1000);
            a330Camera.position.set(-15, 8, 15);
            a330Camera.lookAt(0, 0, 0);
            
            a330Renderer = new THREE.WebGLRenderer({ canvas, antialias: true });
            a330Renderer.setSize(rect.width, rect.height);
            a330Renderer.shadowMap.enabled = true;
            a330Renderer.shadowMap.type = THREE.PCFSoftShadowMap;
            
            // Lighting
            const ambientLight = new THREE.AmbientLight(0x404040, 0.6);
            a330Scene.add(ambientLight);
            
            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
            directionalLight.position.set(-10, 10, 5);
            directionalLight.castShadow = true;
            a330Scene.add(directionalLight);
            
            const pointLight = new THREE.PointLight(0x059669, 0.5);
            pointLight.position.set(10, 5, 10);
            a330Scene.add(pointLight);
            
            // Create aircraft
            a330Aircraft = createAircraftGeometry(false);
            a330Aircraft.castShadow = true;
            a330Aircraft.receiveShadow = true;
            a330Scene.add(a330Aircraft);
            
            // Ground plane
            const groundGeometry = new THREE.PlaneGeometry(100, 100);
            const groundMaterial = new THREE.MeshLambertMaterial({ 
                color: 0x1e293b, 
                transparent: true, 
                opacity: 0.3 
            });
            const ground = new THREE.Mesh(groundGeometry, groundMaterial);
            ground.rotation.x = -Math.PI / 2;
            ground.position.y = -5;
            ground.receiveShadow = true;
            a330Scene.add(ground);
        }
        
        // Animation loop
        function animate() {
            animationId = requestAnimationFrame(animate);
            
            // Gentle rotation for both aircraft
            if (a350Aircraft) {
                a350Aircraft.rotation.y += 0.005;
                a350Aircraft.position.y = Math.sin(Date.now() * 0.001) * 0.5;
            }
            
            if (a330Aircraft) {
                a330Aircraft.rotation.y -= 0.004;
                a330Aircraft.position.y = Math.cos(Date.now() * 0.0008) * 0.3;
            }
            
            // Render scenes
            if (a350Renderer && a350Scene && a350Camera) {
                a350Renderer.render(a350Scene, a350Camera);
            }
            
            if (a330Renderer && a330Scene && a330Camera) {
                a330Renderer.render(a330Scene, a330Camera);
            }
        }
        
        // Control functions
        function updateA350() {
            const altitude = document.getElementById('a350-altitude').value;
            const speed = document.getElementById('a350-speed').value;
            
            // Visual feedback for updates
            if (a350Aircraft) {
                a350Aircraft.position.y = (altitude - 37000) * 0.0001;
                const speedFactor = speed / 480;
                a350Aircraft.scale.setScalar(0.8 + speedFactor * 0.2);
            }
            
            // Add alert
            addAlert(`A350-1000 Updated: ALT ${altitude}ft, SPD ${speed}kts`);
        }
        
        function updateA330() {
            const altitude = document.getElementById('a330-altitude').value;
            const speed = document.getElementById('a330-speed').value;
            
            // Visual feedback for updates
            if (a330Aircraft) {
                a330Aircraft.position.y = (altitude - 39000) * 0.0001;
                const speedFactor = speed / 460;
                a330Aircraft.scale.setScalar(0.8 + speedFactor * 0.2);
            }
            
            // Add alert
            addAlert(`A330 Updated: ALT ${altitude}ft, SPD ${speed}kts`);
        }
        
        function rotateA350() {
            if (a350Camera) {
                const radius = 20;
                const angle = Date.now() * 0.001;
                a350Camera.position.x = Math.cos(angle) * radius;
                a350Camera.position.z = Math.sin(angle) * radius;
                a350Camera.lookAt(0, 0, 0);
            }
        }
        
        function rotateA330() {
            if (a330Camera) {
                const radius = 20;
                const angle = Date.now() * -0.001;
                a330Camera.position.x = Math.cos(angle) * radius;
                a330Camera.position.z = Math.sin(angle) * radius;
                a330Camera.lookAt(0, 0, 0);
            }
        }
        
        function addAlert(message) {
            const alertsContainer = document.querySelector('.system-alerts');
            const alert = document.createElement('div');
            alert.className = 'alert';
            alert.textContent = `✓ ${message}`;
            alertsContainer.insertBefore(alert, alertsContainer.firstChild);
            
            // Remove old alerts
            const alerts = alertsContainer.querySelectorAll('.alert');
            if (alerts.length > 4) {
                alerts[alerts.length - 1].remove();
            }
            
            // Auto-remove after 5 seconds
            setTimeout(() => {
                if (alert.parentNode) {
                    alert.remove();
                }
            }, 5000);
        }
        
        // Handle window resize
        function handleResize() {
            const a350Panel = document.getElementById('a350-viewport').parentElement;
            const a330Panel = document.getElementById('a330-viewport').parentElement;
            
            const rect350 = a350Panel.getBoundingClientRect();
            const rect330 = a330Panel.getBoundingClientRect();
            
            if (a350Camera && a350Renderer) {
                a350Camera.aspect = rect350.width / rect350.height;
                a350Camera.updateProjectionMatrix();
                a350Renderer.setSize(rect350.width, rect350.height);
            }
            
            if (a330Camera && a330Renderer) {
                a330Camera.aspect = rect330.width / rect330.height;
                a330Camera.updateProjectionMatrix();
                a330Renderer.setSize(rect330.width, rect330.height);
            }
        }
        
        window.addEventListener('resize', handleResize);
        
        // Initialize everything when the page loads
        window.addEventListener('load', () => {
            initA350();
            initA330();
            animate();
            
            // Initial alerts
            setTimeout(() => addAlert('Digital Twins Initialized'), 1000);
            setTimeout(() => addAlert('3D Models Loaded Successfully'), 2000);
        });
        
        // Cleanup on page unload
        window.addEventListener('beforeunload', () => {
            if (animationId) {
                cancelAnimationFrame(animationId);
            }
        });
    </script>
</body>
</html>