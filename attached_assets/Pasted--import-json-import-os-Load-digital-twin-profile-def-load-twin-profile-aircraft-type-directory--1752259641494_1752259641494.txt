
import json
import os

# Load digital twin profile
def load_twin_profile(aircraft_type, directory="digital_twin_profiles"):
    filename = f"{aircraft_type.replace('-', '_')}_digital_twin.json"
    filepath = os.path.join(directory, filename)
    with open(filepath, "r") as f:
        return json.load(f)

# Define a scenario simulator
class ScenarioSimulator:
    def __init__(self, aircraft_type, origin, destination, position_nm_from_origin, altitude_ft):
        self.aircraft_type = aircraft_type
        self.origin = origin
        self.destination = destination
        self.position_nm_from_origin = position_nm_from_origin
        self.altitude_ft = altitude_ft
        self.twin_profile = load_twin_profile(aircraft_type)
        self.result = {}

    def simulate_failure(self, failure_type):
        if failure_type not in self.twin_profile:
            raise ValueError(f"{failure_type} not found in twin profile")
        failure = self.twin_profile[failure_type]

        self.result = {
            "aircraft": self.aircraft_type,
            "route": f"{self.origin} to {self.destination}",
            "failure": failure_type,
            "position": f"{self.position_nm_from_origin} nm from {self.origin}",
            "initial_altitude_ft": self.altitude_ft,
            "adjusted_altitude_ft": failure.get("drift_down_altitude_ft", self.altitude_ft if failure_type != "decompression" else 10000),
            "fuel_penalty_factor": failure.get("fuel_penalty_factor", 1.0),
            "landing_distance_factor": failure.get("landing_distance_factor", 1.0),
            "diversion_required": failure.get("diversion_required", False),
            "systems_lost": failure.get("systems_lost", []),
            "notes": []
        }

        if failure_type == "hydraulic_failure":
            self.result["systems_lost"] = failure.get("lost_systems", {})
            self.result["notes"].append("Check for alternate gear extension and brake mode impact.")
        elif failure_type == "decompression":
            self.result["notes"].append("Emergency descent required. Oxygen limits may apply.")
        elif failure_type == "engine_failure":
            self.result["notes"].append("Single-engine operations, max continuous thrust enabled.")
        elif failure_type == "single_engine_landing":
            self.result["notes"].append("Evaluate landing distance, flap limits, and reverser availability.")

        return self.result

# Example use
if __name__ == "__main__":
    sim = ScenarioSimulator("A330-300", "LHR", "JFK", 1700, 37000)
    output = sim.simulate_failure("hydraulic_failure")
    print(json.dumps(output, indent=2))
