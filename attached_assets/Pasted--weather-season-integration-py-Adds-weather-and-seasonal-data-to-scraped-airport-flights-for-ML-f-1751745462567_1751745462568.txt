# weather_season_integration.py
# Adds weather and seasonal data to scraped airport flights for ML feature enrichment

import pandas as pd
import requests
from datetime import datetime

# Load flight data
df = pd.read_csv("airport_flight_data.csv")
df['Scheduled'] = pd.to_datetime(df['Scheduled'], errors='coerce')

# Add seasonal features
df['Month'] = df['Scheduled'].dt.month
df['Weekday'] = df['Scheduled'].dt.weekday
df['Hour'] = df['Scheduled'].dt.hour

# Define basic season mapping (Northern Hemisphere)
def get_season(month):
    if month in [12, 1, 2]: return 'Winter'
    elif month in [3, 4, 5]: return 'Spring'
    elif month in [6, 7, 8]: return 'Summer'
    else: return 'Autumn'

df['Season'] = df['Month'].apply(get_season)

# IATA to ICAO code map
IATA_TO_ICAO = {
    'JFK': 'KJFK',
    'BOS': 'KBOS',
    'ATL': 'KATL',
    'LAX': 'KLAX',
    'SFO': 'KSFO',
    'MCO': 'KMCO',
    'MIA': 'KMIA',
    'TPA': 'KTPA',
    'LAS': 'KLAS',
    'LHR': 'EGLL'
}

# AVWX API key
AVWX_API_KEY = "your_api_key_here"  # Replace with your real key
AVWX_HEADERS = {"Authorization": f"Bearer {AVWX_API_KEY}"}

def fetch_weather_metar(icao_code):
    try:
        url = f"https://avwx.rest/api/metar/{icao_code}?options=info,translate"
        response = requests.get(url, headers=AVWX_HEADERS, timeout=10)
        data = response.json()
        return {
            'TemperatureC': data['temperature']['value'],
            'WindSpeedKt': data['wind_speed']['value'],
            'VisibilityKm': data['visibility']['value'],
            'Weather': data['other_translations'][0] if data['other_translations'] else 'N/A'
        }
    except Exception as e:
        print(f"Weather fetch failed for {icao_code}: {e}")
        return {'TemperatureC': None, 'WindSpeedKt': None, 'VisibilityKm': None, 'Weather': 'N/A'}

# Fetch weather data for each flight
weather_data = []
for _, row in df.iterrows():
    icao = IATA_TO_ICAO.get(row['Airport'], 'XXXX')
    weather = fetch_weather_metar(icao)
    weather_data.append(weather)

weather_df = pd.DataFrame(weather_data)
df = pd.concat([df.reset_index(drop=True), weather_df], axis=1)

# Save enriched dataset
output_file = "enriched_flight_data.csv"
df.to_csv(output_file, index=False)
print(f"Weather and seasonal features added. Output saved to {output_file}")