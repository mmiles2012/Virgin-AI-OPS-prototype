# main.py

import streamlit as st
from flight_model import Flight
from scenario_engine import simulate_diversion
from report_generator import generate_MOR
from fuel_analytics import evaluate_fuel_decision
from crew_module import check_legality_status
from cost_model import estimate_diversion_cost
from customer_impact import customer_disruption_score
from data_feeds import get_weather, get_NOTAMs, get_fuel_price

st.set_page_config(page_title="Flight Ops Digital Twin", layout="wide")

st.title("🧠 AI Flight Ops Digital Twin – Diversion Simulator")

# --- Input Section ---
st.sidebar.header("Flight Parameters")
flight_number = st.sidebar.text_input("Flight Number", "VS58")
origin = st.sidebar.text_input("Origin", "JFK")
destination = st.sidebar.text_input("Destination", "LHR")
aircraft = st.sidebar.selectbox("Aircraft Type", ["B789", "A350", "B773"])
crew_time = st.sidebar.slider("Crew Duty Time Remaining (min)", 30, 600, 240)
fuel = st.sidebar.slider("Fuel On Board (kg)", 10000, 40000, 18000)
etd = st.sidebar.text_input("ETD", "14:30Z")
eta = st.sidebar.text_input("ETA", "00:15Z")

flight = Flight(flight_number, origin, destination, aircraft, crew_time, fuel, etd, eta)

st.sidebar.header("Diversion Scenario")
divert_to = st.sidebar.text_input("Diversion Airport", "DUB")
divert_eta = st.sidebar.text_input("New ETA", "23:40Z")
fuel_burn = st.sidebar.slider("Extra Fuel Burn (kg)", 100, 5000, 1500)
crew_used = st.sidebar.slider("Crew Time Used (min)", 10, 180, 45)
pax = st.sidebar.slider("Passengers Onboard", 50, 350, 280)

run_sim = st.sidebar.button("Simulate Diversion")

# --- Output Section ---
st.subheader("Flight Summary (Before Diversion)")
st.json(flight.print_summary())

if run_sim:
    result = simulate_diversion(flight, divert_to, divert_eta, fuel_burn, crew_used)

    st.subheader("📍 Diversion Simulation Result")
    st.write(result)

    st.subheader("📋 MOR (Occurrence Report) Draft")
    st.code(generate_MOR(flight, result), language="markdown")

    st.subheader("⛽ Fuel Analysis")
    st.json(evaluate_fuel_decision(requested_extra=fuel_burn + 500, actual_burn=fuel_burn))

    st.subheader("🧮 Crew Legality Check")
    st.json(check_legality_status(result["crew_time_remaining"], 60))

    st.subheader("💸 Disruption Cost Estimate")
    st.json(estimate_diversion_cost(pax))

    st.subheader("🙍 Customer Impact Score")
    st.write("Disruption Score (0 = low impact, 100 = high impact):")
    st.metric("Score", customer_disruption_score(90, reroute_required=True, missed_connection=True))

    st.subheader("🌤️ External Factors")
    st.markdown(f"**Weather at {divert_to}:** {get_weather(divert_to)}")
    st.markdown(f"**NOTAMs at {divert_to}:** {get_NOTAMs(divert_to)}")
    st.markdown(f"**Fuel Price at {divert_to}:** £{get_fuel_price(divert_to)}/kg")

st.markdown("---")
st.caption("Prototype developed for AI-enabled IOCC workflow enhancement.")