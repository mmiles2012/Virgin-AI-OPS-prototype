### main.py

from utils.fetch_weather import fetch_and_save_weather_data
from utils.train_model import train_and_save_model
from utils.plot_features import plot_feature_importance

if __name__ == "__main__":
    print("1. Fetching weather data...")
    fetch_and_save_weather_data()

    print("2. Training model with updated data...")
    train_and_save_model()

    print("3. Plotting feature importances...")
    plot_feature_importance()

    print("âœ… Done!")


### requirements.txt
pandas
scikit-learn
matplotlib
joblib
requests


### utils/fetch_weather.py

import pandas as pd
import requests
import time
from datetime import datetime

AVWX_API_KEY = "your_api_key_here"
ICAO_CODES = [
    'EGPD','EGAC','EGAA','EGBB','EGHH','EGGD','EGFF','EGNX',
    'EGPH','EGTE','EGPF','EGNS','EGJJ','EGNM','EGLC','EGCC',
    'EGNT','EGHI'
]


def get_metar_taf_data(station, api_key):
    headers = {"Authorization": api_key, "Accept": "application/json"}
    url = f"https://avwx.rest/api/metar/{station}?options=info,translate"
    try:
        res = requests.get(url, headers=headers).json()
        return {
            "station": station,
            "retrieved_at": datetime.utcnow().isoformat(),
            "visibility": float(res.get("visibility", {}).get("value", 0)),
            "wind_speed": float(res.get("wind_speed", {}).get("value", 0)),
            "temperature": float(res.get("temperature", {}).get("value", 0)),
            "dewpoint": float(res.get("dewpoint", {}).get("value", 0)),
            "flight_rules": res.get("flight_rules", "")
        }
    except:
        return {"station": station, "error": True}


def fetch_and_save_weather_data():
    records = []
    for code in ICAO_CODES:
        records.append(get_metar_taf_data(code, AVWX_API_KEY))
        time.sleep(1.1)
    df = pd.DataFrame(records)
    df["low_visibility_flag"] = df["visibility"] < 3000
    df["strong_wind_flag"] = df["wind_speed"] > 25
    df["ifr_flag"] = df["flight_rules"].isin(["IFR", "LIFR"])
    df["temp_dewpoint_delta"] = df["temperature"] - df["dewpoint"]
    df["fog_risk_flag"] = (df["temp_dewpoint_delta"] < 2) & (df["visibility"] < 2000)
    df.to_csv("data/weather_data.csv", index=False)


### utils/train_model.py

import pandas as pd
import joblib
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
from sklearn.pipeline import Pipeline, make_pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.impute import SimpleImputer
import os


DATA_PATH = "data/latest_training_data.csv"
WEATHER_PATH = "data/weather_data.csv"
MODEL_PATH = "model/random_forest_delay_predictor.pkl"


def train_and_save_model():
    df = pd.read_csv(DATA_PATH)
    if os.path.exists(WEATHER_PATH):
        wx = pd.read_csv(WEATHER_PATH)
        df = df.merge(wx, left_on="icao_code", right_on="station", how="left")

    df = df.dropna(subset=["average_delay_mins"])

    X = df[[
        'airline_name', 'origin_destination', 'arrival_departure', 'scheduled_charter',
        'low_visibility_flag', 'strong_wind_flag', 'ifr_flag', 'fog_risk_flag']]
    y = df["average_delay_mins"]

    categorical_features = ['airline_name', 'origin_destination', 'arrival_departure', 'scheduled_charter']
    boolean_features = ['low_visibility_flag', 'strong_wind_flag', 'ifr_flag', 'fog_risk_flag']

    bool_pipeline = make_pipeline(SimpleImputer(strategy='most_frequent'))

    preprocessor = ColumnTransformer([
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features),
        ('bool', bool_pipeline, boolean_features)
    ])

    model = Pipeline([
        ('preprocessor', preprocessor),
        ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))
    ])

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model.fit(X_train, y_train)
    joblib.dump(model, MODEL_PATH)

    y_pred = model.predict(X_test)
    mae = mean_absolute_error(y_test, y_pred)
    print(f"Test MAE: {mae:.2f} minutes")


### utils/plot_features.py

import joblib
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from utils.train_model import MODEL_PATH


def plot_feature_importance():
    model = joblib.load(MODEL_PATH)
    preprocessor = model.named_steps['preprocessor']
    regressor = model.named_steps['regressor']

    cat_features = ['airline_name', 'origin_destination', 'arrival_departure', 'scheduled_charter']
    bool_features = ['low_visibility_flag', 'strong_wind_flag', 'ifr_flag', 'fog_risk_flag']

    ohe_names = preprocessor.named_transformers_['cat'].get_feature_names_out(cat_features)
    feature_names = np.concatenate([ohe_names, bool_features])

    importances = regressor.feature_importances_
    sorted_idx = np.argsort(importances)[-15:][::-1]

    plt.figure(figsize=(10, 6))
    plt.barh(range(15), importances[sorted_idx][::-1], align='center')
    plt.yticks(range(15), feature_names[sorted_idx][::-1])
    plt.xlabel("Feature Importance")
    plt.title("Top 15 Feature Importances")
    plt.tight_layout()
    plt.savefig("feature_importance.png")
    plt.close()