Chart VS 24 (LAX → LHR) has been ingested

From the text-layer we can see the essential waypoint chain for VIR24M (04 Jul 25) begins at KLAX and ends at EGLL with a North-Atlantic track built on numeric fixes and named intersections such as:

KLAX  →  H5650 5640N 5530N H5320
        GOEINN → EINN → GOEGLL → EGLL

plus the U.S. domestic segment (e.g. DUSMA MALOT ENJEX … CAHIL WYZEE … TEALS DORYY) and alternates/ETOPS equal-time points (KDEN, KMSP, CYYR, BIKF) that ride along in the text  ￼.

⸻

1 ⃣ Updated extractor handles VS 24 automatically

The improved pdf_to_route.py (in the previous message) already:
	•	pulls ≥4-character tokens from the PDF,
	•	keeps numeric fixes like 5640N and 422318N0710224W,
	•	converts them to lat/lon,
	•	looks up named fixes (DUSMA, MALOT, …) in your nav-DB,
	•	writes a ready-to-load JSON block.

Run it:

python pdf_to_route.py VS24_Route\ Chart.pdf >> virgin_routes.json

Replace lookup_fix() with your NavBlue/Lido waypoint resolver or a simple CSV lookup table.

⸻

2 ⃣ Add to the library & test

from route_matcher import RouteLibrary, match_flights
import datetime as dt, json

routes = RouteLibrary.from_json("virgin_routes.json")

# New live flight sample
live_ops_feed = [
    {"flight_nr": "VS24", "origin": "KLAX", "destination": "EGLL",
     "dep_time_utc": "2025-07-04T18:35:00"},
]

flights = match_flights(live_ops_feed, routes)
vs24 = flights[0]

# Ten hours after departure:
now = dt.datetime.fromisoformat("2025-07-05T04:35:00")
lat, lon = vs24.estimate_position(now)
print(f"VS24 estimate: {lat:.2f}°, {lon:.2f}°")

Because the matcher stores cumulative-distance per waypoint, the call to estimate_position() is O(1) and gives you a plausible mid-Atlantic fix without ADS-B.

⸻

3 ⃣ What to do with more PDFs
	1.	Drop them in – run the extractor, append the JSON to virgin_routes.json.
	2.	Variants – if a city-pair has multiple seasonal/NAT tracks, keep all variants in the file and add a variant or valid_from/to key; then choose the plan at runtime based on date or ATC slot.
	3.	Quality checks – print the first few positions on a Leaflet map (reuse the React map component) to eyeball that the polyline hugs the published track.

Upload additional charts (or, even better, a CSV export from your flight-planning system) and I’ll keep extending the loader so your library stays in sync.