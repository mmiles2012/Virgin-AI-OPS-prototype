import requests
import json
from datetime import datetime, timedelta
import time
from typing import Dict, List, Optional
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class NOTAMClient:
    """
    Multi-source NOTAM client for operations center integration
    Supports multiple NOTAM data providers with unified interface
    """
    
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'OpsCenterNOTAM/1.0'
        })
        
        # API Keys - Replace with your actual keys
        self.api_keys = {
            'aviation_edge': 'YOUR_AVIATION_EDGE_API_KEY',
            'notamify': 'YOUR_NOTAMIFY_API_KEY',
            'laminar': 'YOUR_LAMINAR_API_KEY'
        }
        
        # Base URLs
        self.base_urls = {
            'aviation_edge': 'https://aviation-edge.com/v2/public/notamData',
            'notamify': 'https://api.notamify.com/v1/notams',
            'laminar': 'https://api.laminardata.aero/v1/notams'
        }

    def get_faa_notams(self, airport_code: str = None, fir_code: str = None) -> List[Dict]:
        """
        Get NOTAMs from FAA NOTAM Search (screen scraping approach)
        Note: This is a demonstration - in production, use official APIs
        """
        try:
            # FAA NOTAM Search URL
            base_url = "https://notams.aim.faa.gov/notamSearch/search"
            
            params = {
                'bottomLeftLat': '24.0',
                'bottomLeftLon': '-125.0',
                'topRightLat': '49.0',
                'topRightLon': '-66.0',
                'radius': '100'
            }
            
            if airport_code:
                params['locations'] = airport_code.upper()
            
            logger.info(f"Fetching FAA NOTAMs for {airport_code or 'CONUS'}")
            
            # Note: This would require proper HTML parsing in a real implementation
            # For now, return mock data structure
            return [{
                'source': 'FAA',
                'notam_id': 'DEMO_001',
                'location': airport_code or 'CONUS',
                'effective_date': datetime.now().isoformat(),
                'expiry_date': (datetime.now() + timedelta(days=1)).isoformat(),
                'text': 'DEMO NOTAM - Replace with actual FAA data',
                'type': 'AIRSPACE',
                'priority': 'NORMAL'
            }]
            
        except Exception as e:
            logger.error(f"Error fetching FAA NOTAMs: {e}")
            return []

    def get_aviation_edge_notams(self, airport_code: str) -> List[Dict]:
        """
        Get NOTAMs from Aviation Edge API
        """
        try:
            url = self.base_urls['aviation_edge']
            params = {
                'key': self.api_keys['aviation_edge'],
                'codeIataAirport': airport_code.upper()
            }
            
            logger.info(f"Fetching Aviation Edge NOTAMs for {airport_code}")
            response = self.session.get(url, params=params, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                return self._normalize_aviation_edge_data(data)
            else:
                logger.error(f"Aviation Edge API error: {response.status_code}")
                return []
                
        except Exception as e:
            logger.error(f"Error fetching Aviation Edge NOTAMs: {e}")
            return []

    def get_notamify_data(self, location: str, radius_nm: int = 50) -> List[Dict]:
        """
        Get NOTAMs from Notamify API
        """
        try:
            url = self.base_urls['notamify']
            headers = {
                'Authorization': f'Bearer {self.api_keys["notamify"]}',
                'Content-Type': 'application/json'
            }
            
            params = {
                'location': location,
                'radius': radius_nm,
                'format': 'json',
                'active_only': True
            }
            
            logger.info(f"Fetching Notamify NOTAMs for {location}")
            response = self.session.get(url, headers=headers, params=params, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                return self._normalize_notamify_data(data)
            else:
                logger.error(f"Notamify API error: {response.status_code}")
                return []
                
        except Exception as e:
            logger.error(f"Error fetching Notamify NOTAMs: {e}")
            return []

    def get_laminar_notams(self, bbox: Dict[str, float]) -> List[Dict]:
        """
        Get NOTAMs from Laminar Data API
        """
        try:
            url = self.base_urls['laminar']
            headers = {
                'X-API-Key': self.api_keys['laminar'],
                'Content-Type': 'application/json'
            }
            
            params = {
                'bbox': f"{bbox['west']},{bbox['south']},{bbox['east']},{bbox['north']}",
                'active': True,
                'include_military': True
            }
            
            logger.info(f"Fetching Laminar NOTAMs for bbox: {bbox}")
            response = self.session.get(url, headers=headers, params=params, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                return self._normalize_laminar_data(data)
            else:
                logger.error(f"Laminar API error: {response.status_code}")
                return []
                
        except Exception as e:
            logger.error(f"Error fetching Laminar NOTAMs: {e}")
            return []

    def _normalize_aviation_edge_data(self, data: List[Dict]) -> List[Dict]:
        """Normalize Aviation Edge NOTAM data to standard format"""
        normalized = []
        for notam in data:
            normalized.append({
                'source': 'Aviation Edge',
                'notam_id': notam.get('notamId', 'N/A'),
                'location': notam.get('location', 'N/A'),
                'effective_date': notam.get('effectiveDate', ''),
                'expiry_date': notam.get('expiryDate', ''),
                'text': notam.get('text', ''),
                'type': self._classify_notam_type(notam.get('text', '')),
                'priority': self._determine_priority(notam.get('text', ''))
            })
        return normalized

    def _normalize_notamify_data(self, data: Dict) -> List[Dict]:
        """Normalize Notamify NOTAM data to standard format"""
        normalized = []
        notams = data.get('notams', [])
        for notam in notams:
            normalized.append({
                'source': 'Notamify',
                'notam_id': notam.get('id', 'N/A'),
                'location': notam.get('location', 'N/A'),
                'effective_date': notam.get('effective_start', ''),
                'expiry_date': notam.get('effective_end', ''),
                'text': notam.get('text', ''),
                'type': notam.get('category', 'UNKNOWN'),
                'priority': notam.get('priority', 'NORMAL')
            })
        return normalized

    def _normalize_laminar_data(self, data: Dict) -> List[Dict]:
        """Normalize Laminar Data NOTAM data to standard format"""
        normalized = []
        notams = data.get('data', [])
        for notam in notams:
            normalized.append({
                'source': 'Laminar Data',
                'notam_id': notam.get('notam_id', 'N/A'),
                'location': notam.get('location_identifier', 'N/A'),
                'effective_date': notam.get('effective_start', ''),
                'expiry_date': notam.get('effective_end', ''),
                'text': notam.get('text', ''),
                'type': notam.get('type', 'UNKNOWN'),
                'priority': self._determine_priority(notam.get('text', ''))
            })
        return normalized

    def _classify_notam_type(self, text: str) -> str:
        """Classify NOTAM type based on text content"""
        text_upper = text.upper()
        
        if any(keyword in text_upper for keyword in ['MILITARY', 'PROHIBITED', 'RESTRICTED', 'SECURITY']):
            return 'MILITARY_SECURITY'
        elif any(keyword in text_upper for keyword in ['RUNWAY', 'RWY', 'TAXIWAY', 'TWY']):
            return 'RUNWAY_TAXIWAY'
        elif any(keyword in text_upper for keyword in ['AIRSPACE', 'TFR', 'TEMPORARY FLIGHT RESTRICTION']):
            return 'AIRSPACE'
        elif any(keyword in text_upper for keyword in ['NAVAID', 'ILS', 'VOR', 'GPS']):
            return 'NAVIGATION'
        else:
            return 'OTHER'

    def _determine_priority(self, text: str) -> str:
        """Determine NOTAM priority based on text content"""
        text_upper = text.upper()
        
        if any(keyword in text_upper for keyword in ['EMERGENCY', 'URGENT', 'IMMEDIATE', 'SECURITY']):
            return 'HIGH'
        elif any(keyword in text_upper for keyword in ['CLOSED', 'OUT OF SERVICE', 'PROHIBITED']):
            return 'MEDIUM'
        else:
            return 'NORMAL'

    def get_consolidated_notams(self, location: str, radius_nm: int = 50) -> List[Dict]:
        """
        Get NOTAMs from all available sources and consolidate
        """
        all_notams = []
        
        # Try to get NOTAMs from multiple sources
        try:
            # FAA NOTAMs (if location is US airport)
            if len(location) == 3 or len(location) == 4:  # Airport code
                faa_notams = self.get_faa_notams(airport_code=location)
                all_notams.extend(faa_notams)
            
            # Aviation Edge NOTAMs
            aviation_edge_notams = self.get_aviation_edge_notams(location)
            all_notams.extend(aviation_edge_notams)
            
            # Notamify NOTAMs
            notamify_notams = self.get_notamify_data(location, radius_nm)
            all_notams.extend(notamify_notams)
            
            # Add timestamps
            for notam in all_notams:
                notam['retrieved_at'] = datetime.now().isoformat()
                
        except Exception as e:
            logger.error(f"Error consolidating NOTAMs: {e}")
        
        return all_notams

    def filter_security_military(self, notams: List[Dict]) -> List[Dict]:
        """
        Filter NOTAMs for security and military-related content
        """
        security_keywords = [
            'MILITARY', 'SECURITY', 'PROHIBITED', 'RESTRICTED', 'TFR',
            'TEMPORARY FLIGHT RESTRICTION', 'DEFENSE', 'EXERCISE',
            'PRESIDENTIAL', 'VIP', 'EMERGENCY', 'HAZARD'
        ]
        
        filtered = []
        for notam in notams:
            text_upper = notam.get('text', '').upper()
            if any(keyword in text_upper for keyword in security_keywords):
                notam['security_related'] = True
                filtered.append(notam)
        
        return filtered

def main():
    """
    Main function to demonstrate NOTAM data access
    """
    client = NOTAMClient()
    
    # Example usage
    print("=== NOTAM Data Access Demo ===\n")
    
    # Get NOTAMs for a specific location
    location = "KJFK"  # Change to your airport of interest
    print(f"Fetching NOTAMs for {location}...")
    
    notams = client.get_consolidated_notams(location, radius_nm=25)
    
    print(f"\nFound {len(notams)} NOTAMs:")
    print("-" * 50)
    
    for i, notam in enumerate(notams[:5], 1):  # Show first 5
        print(f"{i}. [{notam['source']}] {notam['notam_id']}")
        print(f"   Location: {notam['location']}")
        print(f"   Type: {notam['type']} | Priority: {notam['priority']}")
        print(f"   Effective: {notam['effective_date']}")
        print(f"   Text: {notam['text'][:100]}...")
        print()
    
    # Filter for security/military NOTAMs
    security_notams = client.filter_security_military(notams)
    
    if security_notams:
        print(f"\n=== SECURITY/MILITARY NOTAMs ({len(security_notams)}) ===")
        print("-" * 50)
        
        for notam in security_notams:
            print(f"[{notam['source']}] {notam['notam_id']} - {notam['type']}")
            print(f"Priority: {notam['priority']}")
            print(f"Text: {notam['text'][:150]}...")
            print()
    
    # Save to JSON file for ops center integration
    output_data = {
        'timestamp': datetime.now().isoformat(),
        'location': location,
        'total_notams': len(notams),
        'security_notams': len(security_notams),
        'notams': notams
    }
    
    with open('notam_data.json', 'w') as f:
        json.dump(output_data, f, indent=2)
    
    print(f"\nData saved to 'notam_data.json'")
    print(f"Total NOTAMs: {len(notams)}")
    print(f"Security/Military NOTAMs: {len(security_notams)}")

if __name__ == "__main__":
    main()