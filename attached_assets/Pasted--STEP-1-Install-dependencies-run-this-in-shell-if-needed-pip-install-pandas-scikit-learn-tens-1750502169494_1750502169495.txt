# STEP 1: Install dependencies (run this in shell if needed)
# !pip install pandas scikit-learn tensorflow openpyxl

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping

# STEP 2: Load your Excel file (upload it to Replit first)
df = pd.read_excel("202501_Punctuality_Statistics_Full_Analysis_Arrival_Departure.xlsx")

# STEP 3: Clean the data
df.columns = df.iloc[0]  # Set headers
df = df[1:]              # Drop header row
df = df.dropna(subset=[
    'reporting_period', 'reporting_airport', 'origin_destination_country',
    'origin_destination', 'airline_name', 'arrival_departure', 
    'scheduled_charter', 'average_delay_mins'
])
df['average_delay_mins'] = pd.to_numeric(df['average_delay_mins'], errors='coerce')
df = df.dropna(subset=['average_delay_mins'])

# STEP 4: Encode features
features = [
    'reporting_airport', 'origin_destination_country', 'origin_destination',
    'airline_name', 'arrival_departure', 'scheduled_charter'
]
target = 'average_delay_mins'

df_encoded = pd.get_dummies(df[features + [target]])
X = df_encoded.drop(columns=[col for col in df_encoded.columns if 'average_delay_mins' in col])
y = df_encoded[target].astype(float)

# STEP 5: Scale and split
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# STEP 6: Build model
model = Sequential([
    Dense(256, activation='relu', input_shape=(X_train.shape[1],)),
    Dropout(0.3),
    Dense(128, activation='relu'),
    Dropout(0.3),
    Dense(1)
])

model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])
early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)

# STEP 7: Train model
history = model.fit(X_train, y_train, validation_split=0.2, epochs=50, batch_size=32, callbacks=[early_stop])

# STEP 8: Evaluate
loss, mae = model.evaluate(X_test, y_test)
print(f"\nâœ… Test MAE: {mae:.2f} minutes average prediction error")