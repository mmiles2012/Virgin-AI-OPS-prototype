import React, { useState, useEffect } from 'react';
import { AlertTriangle, Plane, Gauge, Zap, Wind } from 'lucide-react';

const Boeing787EmergencySimulator = () => {
  const [scenario, setScenario] = useState('normal');
  const [flightData, setFlightData] = useState({
    altitude: 41000,
    speed: 480, // knots
    fuelRemaining: 45000, // kg
    fuelBurnRate: 2800, // kg/hr normal cruise
    range: 7500, // nautical miles
    timeRemaining: 16.1, // hours
    emergencyStatus: 'Normal Operations'
  });

  // Boeing 787-9 baseline specifications
  const aircraft = {
    maxFuel: 126206, // kg
    normalCruiseBurn: 2800, // kg/hr
    normalCruiseSpeed: 480, // knots
    normalCruiseAltitude: 41000, // ft
    maxRange: 7635, // nautical miles
    serviceceiling: 43000 // ft
  };

  const scenarios = {
    normal: {
      name: 'Normal Operations',
      fuelBurnMultiplier: 1.0,
      speedReduction: 0,
      altitudeRestriction: null,
      description: 'Normal cruise flight operations'
    },
    engineFailure: {
      name: 'Single Engine Failure',
      fuelBurnMultiplier: 1.35,
      speedReduction: 40,
      altitudeRestriction: 25000,
      description: 'One engine inoperative - increased drag and fuel burn'
    },
    hydraulicFault: {
      name: 'Major Hydraulic Fault',
      fuelBurnMultiplier: 1.15,
      speedReduction: 20,
      altitudeRestriction: null,
      description: 'Backup flight controls - increased fuel consumption'
    },
    electricalFault: {
      name: 'Major Electrical Fault',
      fuelBurnMultiplier: 1.25,
      speedReduction: 30,
      altitudeRestriction: 35000,
      description: 'Emergency electrical configuration - limited systems'
    },
    depressurization: {
      name: 'Cabin Depressurization',
      fuelBurnMultiplier: 1.45,
      speedReduction: 60,
      altitudeRestriction: 10000,
      description: 'Emergency descent to 10,000ft - high fuel burn'
    }
  };

  const calculateEmergencyImpact = (selectedScenario) => {
    const scenarioData = scenarios[selectedScenario];
    
    let newAltitude = flightData.altitude;
    let newSpeed = aircraft.normalCruiseSpeed - scenarioData.speedReduction;
    let newFuelBurnRate = aircraft.normalCruiseBurn * scenarioData.fuelBurnMultiplier;
    
    // Apply altitude restrictions
    if (scenarioData.altitudeRestriction && flightData.altitude > scenarioData.altitudeRestriction) {
      newAltitude = scenarioData.altitudeRestriction;
    }
    
    // Calculate additional fuel burn for altitude changes
    let altitudeChangeFuel = 0;
    if (newAltitude < flightData.altitude) {
      // Emergency descent fuel penalty
      const descentDistance = (flightData.altitude - newAltitude) / 1000;
      altitudeChangeFuel = descentDistance * 150; // kg per 1000ft descent penalty
    }
    
    // Calculate new range based on fuel burn
    const effectiveFuel = flightData.fuelRemaining - altitudeChangeFuel;
    const newTimeRemaining = Math.max(0, effectiveFuel / newFuelBurnRate);
    const newRange = (newSpeed * newTimeRemaining) / 1.15078; // Convert to nautical miles
    
    return {
      altitude: newAltitude,
      speed: newSpeed,
      fuelBurnRate: newFuelBurnRate,
      fuelRemaining: Math.max(0, effectiveFuel),
      timeRemaining: newTimeRemaining,
      range: Math.round(newRange),
      emergencyStatus: scenarioData.name,
      altitudeChangeFuel
    };
  };

  useEffect(() => {
    const newData = calculateEmergencyImpact(scenario);
    setFlightData(prev => ({ ...prev, ...newData }));
  }, [scenario]);

  const getStatusColor = (scenario) => {
    switch(scenario) {
      case 'normal': return 'text-green-600';
      case 'hydraulicFault': return 'text-yellow-600';
      case 'electricalFault': return 'text-orange-600';
      case 'engineFailure': return 'text-red-600';
      case 'depressurization': return 'text-red-700';
      default: return 'text-gray-600';
    }
  };

  const rangeReduction = aircraft.maxRange - flightData.range;
  const rangeReductionPercent = ((rangeReduction / aircraft.maxRange) * 100).toFixed(1);

  return (
    <div className="max-w-6xl mx-auto p-6 bg-gray-50 min-h-screen">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-800 mb-2 flex items-center gap-3">
          <Plane className="text-blue-600" />
          Boeing 787 Emergency Scenarios Simulator
        </h1>
        <p className="text-gray-600">Simulate various emergency scenarios and their impact on fuel consumption and flight range</p>
      </div>

      {/* Scenario Selection */}
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
          <AlertTriangle className="text-orange-500" />
          Select Emergency Scenario
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {Object.entries(scenarios).map(([key, data]) => (
            <button
              key={key}
              onClick={() => setScenario(key)}
              className={`p-4 rounded-lg border-2 text-left transition-all ${
                scenario === key 
                  ? 'border-blue-500 bg-blue-50' 
                  : 'border-gray-200 hover:border-gray-300'
              }`}
            >
              <div className="font-semibold text-gray-800">{data.name}</div>
              <div className="text-sm text-gray-600 mt-1">{data.description}</div>
            </button>
          ))}
        </div>
      </div>

      {/* Current Status */}
      <div className="bg-white rounded-lg shadow-md p-6 mb-6">
        <h2 className="text-xl font-semibold mb-4">Current Flight Status</h2>
        <div className={`text-lg font-semibold mb-4 ${getStatusColor(scenario)}`}>
          Status: {flightData.emergencyStatus}
        </div>
        
        <div className="grid grid-cols-2 md:grid-cols-4 gap-6">
          <div className="text-center">
            <div className="text-2xl font-bold text-gray-800">{flightData.altitude.toLocaleString()}</div>
            <div className="text-sm text-gray-600">Altitude (ft)</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-gray-800">{flightData.speed}</div>
            <div className="text-sm text-gray-600">Speed (knots)</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-gray-800">{flightData.fuelRemaining.toLocaleString()}</div>
            <div className="text-sm text-gray-600">Fuel Remaining (kg)</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-gray-800">{flightData.timeRemaining.toFixed(1)}</div>
            <div className="text-sm text-gray-600">Time Remaining (hrs)</div>
          </div>
        </div>
      </div>

      {/* Performance Impact */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
            <Gauge className="text-blue-500" />
            Fuel Consumption Impact
          </h3>
          <div className="space-y-4">
            <div className="flex justify-between">
              <span>Normal Burn Rate:</span>
              <span className="font-semibold">{aircraft.normalCruiseBurn} kg/hr</span>
            </div>
            <div className="flex justify-between">
              <span>Current Burn Rate:</span>
              <span className="font-semibold text-red-600">{flightData.fuelBurnRate} kg/hr</span>
            </div>
            <div className="flex justify-between">
              <span>Increase:</span>
              <span className="font-semibold text-red-600">
                +{(flightData.fuelBurnRate - aircraft.normalCruiseBurn).toFixed(0)} kg/hr 
                ({(((flightData.fuelBurnRate / aircraft.normalCruiseBurn) - 1) * 100).toFixed(1)}%)
              </span>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
            <Wind className="text-green-500" />
            Range Impact
          </h3>
          <div className="space-y-4">
            <div className="flex justify-between">
              <span>Normal Max Range:</span>
              <span className="font-semibold">{aircraft.maxRange} nm</span>
            </div>
            <div className="flex justify-between">
              <span>Current Range:</span>
              <span className="font-semibold text-red-600">{flightData.range} nm</span>
            </div>
            <div className="flex justify-between">
              <span>Range Reduction:</span>
              <span className="font-semibold text-red-600">
                -{rangeReduction} nm ({rangeReductionPercent}%)
              </span>
            </div>
          </div>
        </div>
      </div>

      {/* Detailed Analysis */}
      <div className="bg-white rounded-lg shadow-md p-6">
        <h3 className="text-lg font-semibold mb-4">Emergency Scenario Analysis</h3>
        <div className="bg-gray-50 p-4 rounded-lg">
          <p className="text-gray-700 mb-3">{scenarios[scenario].description}</p>
          
          {scenario === 'engineFailure' && (
            <div className="text-sm text-gray-600">
              <strong>Engine Failure Impact:</strong> Single engine operation requires higher thrust from remaining engine, 
              increased drag from asymmetric thrust, and altitude restriction for safe single-engine performance.
            </div>
          )}
          
          {scenario === 'depressurization' && (
            <div className="text-sm text-gray-600">
              <strong>Depressurization Impact:</strong> Emergency descent to 10,000ft requires high fuel consumption during descent 
              and continued operation at inefficient low altitude with increased air density.
            </div>
          )}
          
          {scenario === 'hydraulicFault' && (
            <div className="text-sm text-gray-600">
              <strong>Hydraulic Fault Impact:</strong> Backup flight control systems require more engine power to maintain 
              flight path, resulting in increased fuel consumption.
            </div>
          )}
          
          {scenario === 'electricalFault' && (
            <div className="text-sm text-gray-600">
              <strong>Electrical Fault Impact:</strong> Emergency electrical configuration limits system efficiency 
              and may require altitude restriction for safe operations.
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Boeing787EmergencySimulator;