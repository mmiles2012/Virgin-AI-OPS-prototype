import React, { useMemo } from "react";
import {
  MapContainer,
  TileLayer,
  Polyline,
  Marker,
  Popup,
  useMap,
} from "react-leaflet";
import "leaflet/dist/leaflet.css";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { motion } from "framer-motion";
import { AlertCircle, CheckCircle2 } from "lucide-react";

// -----------------------------------------------------------------------------
// Types
// -----------------------------------------------------------------------------

export interface DiversionResult {
  alternate: {
    name: string;
    lat: number;
    lon: number;
  };
  distance_nm: number;
  time_hr: number;
  fuel_required_kg: number;
  remaining_fuel_kg: number;
  reachable: boolean;
}

export interface DiversionMapProps {
  current: { lat: number; lon: number };
  results: DiversionResult[];
  height?: string; // e.g. "500px"
  zoom?: number;
}

// -----------------------------------------------------------------------------
// Helpers
// -----------------------------------------------------------------------------

const lineColor = (reachable: boolean) => (reachable ? "#16a34a" : "#dc2626");

// Leaflet expects [lat, lon] tuples in that order.
const toLatLng = (lat: number, lon: number): [number, number] => [lat, lon];

// -----------------------------------------------------------------------------
// Map auto-fit hook â€“ zooms/centers to show all points
// -----------------------------------------------------------------------------
function FitBounds({ current, results }: { current: [number, number]; results: DiversionResult[] }) {
  const map = useMap();
  const bounds = useMemo(() => {
    const pts: [number, number][] = [current, ...results.map(r => toLatLng(r.alternate.lat, r.alternate.lon))];
    return pts;
  }, [current, results]);

  React.useEffect(() => {
    if (bounds.length > 1) {
      map.fitBounds(bounds as any, { padding: [50, 50] });
    }
  }, [map, bounds]);

  return null;
}

// -----------------------------------------------------------------------------
// DiversionMap component
// -----------------------------------------------------------------------------

const DiversionMap: React.FC<DiversionMapProps> = ({ current, results, height = "500px", zoom = 6 }) => {
  const currentLatLng = toLatLng(current.lat, current.lon);

  // Sort results so reachable ones appear first in legend
  const sorted = useMemo(
    () => [...results].sort((a, b) => Number(b.reachable) - Number(a.reachable)),
    [results]
  );

  return (
    <div className="grid gap-4 2xl:gap-6">
      <motion.div
        className="w-full rounded-2xl shadow-lg overflow-hidden"
        initial={{ opacity: 0, y: 24 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <MapContainer
          style={{ height }}
          center={currentLatLng}
          zoom={zoom}
          scrollWheelZoom={false}
          className="z-0"
        >
          <TileLayer
            attribution="&copy; OpenStreetMap contributors"
            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
          />

          {/* Auto fit bounds */}
          <FitBounds current={currentLatLng} results={results} />

          {/* Marker at current position */}
          <Marker position={currentLatLng}>
            <Popup>
              <strong>Current Position</strong>
              <br />
              Lat: {current.lat.toFixed(4)}
              <br />
              Lon: {current.lon.toFixed(4)}
            </Popup>
          </Marker>

          {/* Lines + markers for alternates */}
          {results.map(res => {
            const altPos = toLatLng(res.alternate.lat, res.alternate.lon);
            return (
              <React.Fragment key={res.alternate.name}>
                <Polyline
                  positions={[currentLatLng, altPos] as [number, number][]}
                  pathOptions={{ color: lineColor(res.reachable), weight: 3 }}
                />
                <Marker position={altPos}>
                  <Popup>
                    <strong>{res.alternate.name}</strong>
                    <br />Dist: {res.distance_nm} NM
                    <br />Time: {res.time_hr} h
                    <br />Fuel req: {res.fuel_required_kg} kg
                    <br />Fuel margin: {res.remaining_fuel_kg} kg
                    <br />Status: {res.reachable ? "Reachable" : "Unreachable"}
                  </Popup>
                </Marker>
              </React.Fragment>
            );
          })}
        </MapContainer>
      </motion.div>

      {/* Legend / details */}
      <Card className="w-full">
        <CardContent className="p-4 sm:p-6">
          <h2 className="text-xl font-semibold mb-4">Diversion Options</h2>
          <div className="space-y-3">
            {sorted.map(res => (
              <motion.div
                key={res.alternate.name}
                className="flex items-center justify-between bg-muted/50 p-3 rounded-lg"
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.3 }}
              >
                <div className="flex items-center gap-2">
                  {res.reachable ? (
                    <CheckCircle2 className="w-5 h-5 text-emerald-600" />
                  ) : (
                    <AlertCircle className="w-5 h-5 text-red-600" />
                  )}
                  <span className="font-medium">{res.alternate.name}</span>
                </div>
                <div className="text-sm text-right">
                  <div>{res.distance_nm} NM / {res.time_hr} h</div>
                  <div>Margin: {res.remaining_fuel_kg} kg</div>
                </div>
              </motion.div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Optional actions */}
      <div className="flex justify-end">
        <Button size="sm" variant="outline" onClick={() => window.location.reload()}>Refresh Data</Button>
      </div>
    </div>
  );
};

export default DiversionMap;
