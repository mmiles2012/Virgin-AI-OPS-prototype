// AWC Official Data API Client
// Uses the current official AWC Data API (replaces discontinued Text Data Server)

const axios = require(‘axios’);
const fs = require(‘fs’).promises;

class AWCDataClient {
constructor() {
this.baseURL = ‘https://aviationweather.gov/api/data’;
this.cacheURL = ‘https://aviationweather.gov/data/cache’;
this.headers = {
‘User-Agent’: ‘WeatherApp/1.0 (Educational Use)’,
‘Accept’: ‘application/json, application/xml, text/plain’,
};
this.requestDelay = 1000; // 1 second between requests (be respectful)
}

```
// Add delay between requests
async delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// Get SIGMET data from official API
async getSigmets(options = {}) {
    try {
        const params = new URLSearchParams({
            dataSource: 'sigmets',
            format: options.format || 'json',
            date: options.date || '', // YYYY-MM-DD format
            bbox: options.bbox || '', // lat1,lon1,lat2,lon2
            ...options.customParams
        });

        console.log('Fetching SIGMET data from AWC Data API...');
        
        const response = await axios.get(`${this.baseURL}/sigmets`, {
            params,
            headers: this.headers,
            timeout: 15000
        });

        const data = {
            sigmets: response.data,
            requestTime: new Date().toISOString(),
            source: 'AWC Data API',
            query: params.toString()
        };

        console.log(`Fetched ${Array.isArray(response.data) ? response.data.length : 'N/A'} SIGMETs`);
        return data;

    } catch (error) {
        console.error('Error fetching SIGMET data:', error.message);
        throw error;
    }
}

// Get AIRMET data (Note: Traditional AIRMETs discontinued Jan 2025, replaced by G-AIRMETs)
async getAirmets(options = {}) {
    try {
        const params = new URLSearchParams({
            dataSource: 'airmets',
            format: options.format || 'json',
            date: options.date || '',
            bbox: options.bbox || '',
            ...options.customParams
        });

        console.log('Fetching AIRMET data from AWC Data API...');
        console.log('Note: Traditional AIRMETs discontinued Jan 2025, replaced by G-AIRMETs');
        
        const response = await axios.get(`${this.baseURL}/airmets`, {
            params,
            headers: this.headers,
            timeout: 15000
        });

        const data = {
            airmets: response.data,
            requestTime: new Date().toISOString(),
            source: 'AWC Data API',
            query: params.toString(),
            note: 'Traditional AIRMETs discontinued Jan 2025, replaced by G-AIRMETs'
        };

        console.log(`Fetched ${Array.isArray(response.data) ? response.data.length : 'N/A'} AIRMETs`);
        return data;

    } catch (error) {
        console.error('Error fetching AIRMET data:', error.message);
        throw error;
    }
}

// Get G-AIRMET data (new format replacing traditional AIRMETs)
async getGAirmets(options = {}) {
    try {
        const params = new URLSearchParams({
            dataSource: 'gairmets',
            format: options.format || 'json',
            date: options.date || '',
            bbox: options.bbox || '',
            hazard: options.hazard || '', // TURB, ICE, IFR, etc.
            ...options.customParams
        });

        console.log('Fetching G-AIRMET data from AWC Data API...');
        
        const response = await axios.get(`${this.baseURL}/gairmets`, {
            params,
            headers: this.headers,
            timeout: 15000
        });

        const data = {
            gairmets: response.data,
            requestTime: new Date().toISOString(),
            source: 'AWC Data API',
            query: params.toString()
        };

        console.log(`Fetched ${Array.isArray(response.data) ? response.data.length : 'N/A'} G-AIRMETs`);
        return data;

    } catch (error) {
        console.error('Error fetching G-AIRMET data:', error.message);
        throw error;
    }
}

// Get METAR data
async getMETARs(stations, options = {}) {
    try {
        const params = new URLSearchParams({
            dataSource: 'metars',
            requestType: 'retrieve',
            format: options.format || 'json',
            stationString: Array.isArray(stations) ? stations.join(',') : stations,
            hoursBeforeNow: options.hours || 2,
            mostRecent: options.mostRecent || 'true',
            ...options.customParams
        });

        console.log(`Fetching METAR data for stations: ${stations}`);
        
        const response = await axios.get(`${this.baseURL}/metar`, {
            params,
            headers: this.headers,
            timeout: 15000
        });

        const data = {
            metars: response.data,
            stations: stations,
            requestTime: new Date().toISOString(),
            source: 'AWC Data API',
            query: params.toString()
        };

        console.log(`Fetched ${Array.isArray(response.data) ? response.data.length : 'N/A'} METARs`);
        return data;

    } catch (error) {
        console.error('Error fetching METAR data:', error.message);
        throw error;
    }
}

// Get TAF data
async getTAFs(stations, options = {}) {
    try {
        const params = new URLSearchParams({
            dataSource: 'tafs',
            requestType: 'retrieve',
            format: options.format || 'json',
            stationString: Array.isArray(stations) ? stations.join(',') : stations,
            hoursBeforeNow: options.hours || 4,
            ...options.customParams
        });

        console.log(`Fetching TAF data for stations: ${stations}`);
        
        const response = await axios.get(`${this.baseURL}/taf`, {
            params,
            headers: this.headers,
            timeout: 15000
        });

        const data = {
            tafs: response.data,
            stations: stations,
            requestTime: new Date().toISOString(),
            source: 'AWC Data API',
            query: params.toString()
        };

        console.log(`Fetched ${Array.isArray(response.data) ? response.data.length : 'N/A'} TAFs`);
        return data;

    } catch (error) {
        console.error('Error fetching TAF data:', error.message);
        throw error;
    }
}

// Get PIREP data
async getPIREPs(options = {}) {
    try {
        const params = new URLSearchParams({
            dataSource: 'pireps',
            format: options.format || 'json',
            hoursBeforeNow: options.hours || 4,
            bbox: options.bbox || '',
            ...options.customParams
        });

        console.log('Fetching PIREP data from AWC Data API...');
        
        const response = await axios.get(`${this.baseURL}/pirep`, {
            params,
            headers: this.headers,
            timeout: 15000
        });

        const data = {
            pireps: response.data,
            requestTime: new Date().toISOString(),
            source: 'AWC Data API',
            query: params.toString()
        };

        console.log(`Fetched ${Array.isArray(response.data) ? response.data.length : 'N/A'} PIREPs`);
        return data;

    } catch (error) {
        console.error('Error fetching PIREP data:', error.message);
        throw error;
    }
}

// Use AWC Cache Files (recommended for large queries)
async getCacheFile(type = 'metars') {
    try {
        const cacheTypes = {
            'metars': 'metars.cache.json',
            'tafs': 'tafs.cache.json',
            'sigmets': 'sigmets.cache.json',
            'airmets': 'airmets.cache.json',
            'pireps': 'pireps.cache.json',
            'stations': 'stations.cache.json'
        };

        const filename = cacheTypes[type] || cacheTypes.metars;
        
        console.log(`Fetching cache file: ${filename}`);
        
        const response = await axios.get(`${this.cacheURL}/${filename}`, {
            headers: this.headers,
            timeout: 30000
        });

        const data = {
            type,
            data: response.data,
            requestTime: new Date().toISOString(),
            source: 'AWC Cache File',
            filename
        };

        console.log(`Fetched cache file: ${filename}`);
        return data;

    } catch (error) {
        console.error(`Error fetching cache file: ${error.message}`);
        throw error;
    }
}

// Get comprehensive weather data for a region
async getRegionalWeather(bbox, options = {}) {
    try {
        console.log(`Fetching regional weather data for bbox: ${bbox}`);
        
        const results = {
            region: bbox,
            timestamp: new Date().toISOString(),
            data: {}
        };

        // Get SIGMETs
        try {
            const sigmets = await this.getSigmets({ bbox, ...options });
            results.data.sigmets = sigmets;
            await this.delay(this.requestDelay);
        } catch (error) {
            console.error('Failed to fetch SIGMETs:', error.message);
            results.data.sigmets = { error: error.message };
        }

        // Get G-AIRMETs
        try {
            const gairmets = await this.getGAirmets({ bbox, ...options });
            results.data.gairmets = gairmets;
            await this.delay(this.requestDelay);
        } catch (error) {
            console.error('Failed to fetch G-AIRMETs:', error.message);
            results.data.gairmets = { error: error.message };
        }

        // Get PIREPs
        try {
            const pireps = await this.getPIREPs({ bbox, ...options });
            results.data.pireps = pireps;
            await this.delay(this.requestDelay);
        } catch (error) {
            console.error('Failed to fetch PIREPs:', error.message);
            results.data.pireps = { error: error.message };
        }

        return results;

    } catch (error) {
        console.error('Error fetching regional weather:', error.message);
        throw error;
    }
}

// Save data to file
async saveToFile(data, filename = null) {
    try {
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const defaultFilename = `awc_weather_${timestamp}.json`;
        const file = filename || defaultFilename;
        
        await fs.writeFile(file, JSON.stringify(data, null, 2));
        console.log(`Data saved to ${file}`);
        return file;
    } catch (error) {
        console.error('Error saving data:', error.message);
        throw error;
    }
}

// Monitor weather data (periodic updates)
async startMonitoring(intervalMinutes = 15, options = {}) {
    console.log(`Starting weather monitoring (every ${intervalMinutes} minutes)...`);
    
    const monitorFunction = async () => {
        try {
            const timestamp = new Date().toISOString();
            console.log(`\n=== Weather Update: ${timestamp} ===`);

            // Get current SIGMETs
            const sigmets = await this.getSigmets(options);
            await this.delay(this.requestDelay);

            // Get current G-AIRMETs
            const gairmets = await this.getGAirmets(options);
            await this.delay(this.requestDelay);

            const monitorData = {
                timestamp,
                sigmets,
                gairmets,
                monitoring: true
            };

            // Save to file
            await this.saveToFile(monitorData, `monitor_${Date.now()}.json`);

            console.log('Weather monitoring update completed');

        } catch (error) {
            console.error('Error in weather monitoring:', error.message);
        }
    };

    // Run initial check
    await monitorFunction();

    // Set up interval
    const interval = setInterval(monitorFunction, intervalMinutes * 60 * 1000);

    // Return stop function
    return () => {
        clearInterval(interval);
        console.log('Weather monitoring stopped');
    };
}
```

}

// Usage examples
async function main() {
const client = new AWCDataClient();

```
try {
    // Example 1: Get current SIGMETs
    console.log('=== Getting Current SIGMETs ===');
    const sigmets = await client.getSigmets();
    console.log('SIGMETs:', JSON.stringify(sigmets, null, 2));

    await client.delay(1000);

    // Example 2: Get METARs for specific airports
    console.log('\n=== Getting METARs for Major Airports ===');
    const metars = await client.getMETARs(['KJFK', 'KLAX', 'KORD', 'KATL']);
    console.log('METARs:', JSON.stringify(metars, null, 2));

    await client.delay(1000);

    // Example 3: Get regional weather (NYC area)
    console.log('\n=== Getting Regional Weather (NYC Area) ===');
    const nycBbox = '40.0,-75.0,41.0,-73.0'; // lat1,lon1,lat2,lon2
    const regional = await client.getRegionalWeather(nycBbox);
    console.log('Regional Weather:', JSON.stringify(regional, null, 2));

    await client.delay(1000);

    // Example 4: Get cache file (recommended for large queries)
    console.log('\n=== Getting Cache File ===');
    const cache = await client.getCacheFile('sigmets');
    console.log(`Cache file contains ${Array.isArray(cache.data) ? cache.data.length : 'N/A'} items`);

    // Save all data
    await client.saveToFile({
        sigmets,
        metars,
        regional,
        cacheInfo: { type: cache.type, count: Array.isArray(cache.data) ? cache.data.length : 0 }
    });

    // Example 5: Start monitoring (uncomment to enable)
    // console.log('\n=== Starting Weather Monitoring ===');
    // const stopMonitoring = await client.startMonitoring(10); // Every 10 minutes
    // setTimeout(stopMonitoring, 3600000); // Stop after 1 hour

} catch (error) {
    console.error('Main execution error:', error.message);
}
```

}

// Export for use as module
module.exports = AWCDataClient;

// Run if called directly
if (require.main === module) {
main();
}