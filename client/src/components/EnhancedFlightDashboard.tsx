import React, { useState } from 'react'; import { useAsyncData, usePaginatedData } from '../hooks/useAsyncData'; import { useToast, useSuccessToast, useErrorToast } from '../contexts/ToastContext'; import { useResponsive, ResponsiveGrid, ResponsiveContainer } from '../contexts/ResponsiveContext'; import { LoadingState, LoadingButton } from './ui/Loading'; import { DashboardSkeleton, CardSkeleton, ChartSkeleton } from './ui/Skeleton'; import { ComponentErrorBoundary } from './ui/ErrorBoundary'; import { RefreshCw, Plane, TrendingUp, AlertTriangle, MapPin } from 'lucide-react'; // Mock API functions for demonstration const fetchFlightSummary = async () => { await new Promise(resolve => setTimeout(resolve, 1000)); return { totalFlights: 42, onTime: 38, delayed: 4, cancelled: 0, avgDelay: 12.5 }; }; const fetchFlightData = async (page: number, pageSize: number) => { await new Promise(resolve => setTimeout(resolve, 800)); const allFlights = Array.from({ length: 100 }, (_, i) => ({ id: `VS${String(i + 1).padStart(3, '0')}`, origin: ['LHR', 'MAN', 'LGW'][i % 3], destination: ['JFK', 'LAX', 'BOS', 'SFO'][i % 4], status: ['On Time', 'Delayed', 'Boarding'][i % 3], departure: new Date(Date.now() + (i * 3600000)).toLocaleTimeString(), delay: Math.random() > 0.7 ? Math.floor(Math.random() * 60) : 0 })); const start = (page - 1) * pageSize; const end = start + pageSize; return { data: allFlights.slice(start, end), total: allFlights.length }; }; const fetchWeatherData = async () => { await new Promise(resolve => setTimeout(resolve, 600)); return { temperature: 22, condition: 'Partly Cloudy', visibility: '10km', wind: '15 knots NW' }; }; const EnhancedFlightDashboard: React.FC = () => { const { isMobile, isTablet } = useResponsive(); const { addToast } = useToast(); const successToast = useSuccessToast(); const errorToast = useErrorToast(); const [refreshKey, setRefreshKey] = useState(0); // Async data with error handling and loading states const flightSummary = useAsyncData(fetchFlightSummary, { dependencies: [refreshKey], onSuccess: () => successToast('Flight summary updated'), onError: (error) => errorToast(`Failed to load flight summary: ${error}`) }); const paginatedFlights = usePaginatedData(fetchFlightData, { pageSize: isMobile ? 5 : isTablet ? 8 : 10, dependencies: [refreshKey] }); const weatherData = useAsyncData(fetchWeatherData, { dependencies: [refreshKey], cacheTTL: 10 * 60 * 1000 // 10 minutes cache }); const handleRefresh = () => { setRefreshKey(prev => prev + 1); addToast({ type: 'info', message: 'Refreshing dashboard data...', duration: 2000 }); }; const handleTestError = () => { throw new Error('This is a test error to demonstrate error boundaries'); }; return ( <ResponsiveContainer maxWidth="full" className="py-6"> <div className="space-y-6"> {/* Header */} <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4"> <div> <h1 className="text-2xl sm:text-3xl font-bold text-gray-900">Enhanced Flight Dashboard</h1> <p className="text-gray-600 mt-1">Modern UI patterns demonstration</p> </div> <div className="flex items-center gap-2"> <LoadingButton loading={flightSummary.loading} onClick={handleRefresh} variant="secondary" className="flex items-center gap-2" > <RefreshCw className="h-4 w-4" /> Refresh </LoadingButton> <button onClick={handleTestError} className="px-4 py-2 bg-red-600 hover:bg-red-700 text-gray-900 rounded-lg text-sm" > Test Error </button> </div> </div> {/* Summary Cards */} <ComponentErrorBoundary> <LoadingState loading={flightSummary.loading} fallback={ <ResponsiveGrid cols={{ sm: 2, md: 3, lg: 5 }}> {Array.from({ length: 5 }).map((_, i) => <CardSkeleton key={i} />)} </ResponsiveGrid> }> {flightSummary.data && ( <ResponsiveGrid cols={{ sm: 2, md: 3, lg: 5 }}> <StatCard icon={<Plane className="h-6 w-6" />} title="Total Flights" value={flightSummary.data.totalFlights} color="blue" /> <StatCard icon={<TrendingUp className="h-6 w-6" />} title="On Time" value={flightSummary.data.onTime} color="green" /> <StatCard icon={<AlertTriangle className="h-6 w-6" />} title="Delayed" value={flightSummary.data.delayed} color="orange" /> <StatCard icon={<AlertTriangle className="h-6 w-6" />} title="Cancelled" value={flightSummary.data.cancelled} color="red" /> <StatCard icon={<MapPin className="h-6 w-6" />} title="Avg Delay" value={`${flightSummary.data.avgDelay}m`} color="purple" /> </ResponsiveGrid> )} </LoadingState> </ComponentErrorBoundary> {/* Weather Widget */} <ComponentErrorBoundary> <LoadingState loading={weatherData.loading} fallback={<CardSkeleton />}> {weatherData.data && ( <div className="bg-white rounded-lg p-6"> <h3 className="text-lg font-semibold mb-4">Weather Conditions</h3> <div className="grid grid-cols-2 md:grid-cols-4 gap-4"> <div> <p className="text-sm text-gray-500">Temperature</p> <p className="text-xl font-bold">{weatherData.data.temperature}°C</p> </div> <div> <p className="text-sm text-gray-500">Condition</p> <p className="text-lg">{weatherData.data.condition}</p> </div> <div> <p className="text-sm text-gray-500">Visibility</p> <p className="text-lg">{weatherData.data.visibility}</p> </div> <div> <p className="text-sm text-gray-500">Wind</p> <p className="text-lg">{weatherData.data.wind}</p> </div> </div> </div> )} </LoadingState> </ComponentErrorBoundary> {/* Flight List with Pagination */} <ComponentErrorBoundary> <div className="bg-white rounded-lg p-6"> <div className="flex justify-between items-center mb-4"> <h3 className="text-lg font-semibold">Recent Flights</h3> <p className="text-sm text-gray-500"> {paginatedFlights.totalItems} total flights </p> </div> <LoadingState loading={paginatedFlights.loading} fallback={ <div className="space-y-3"> {Array.from({ length: isMobile ? 5 : 8 }).map((_, i) => ( <div key={i} className="flex justify-between items-center p-3 border rounded"> <div className="flex space-x-4"> <div className="w-12 h-6 bg-gray-200 rounded animate-pulse" /> <div className="w-20 h-6 bg-gray-200 rounded animate-pulse" /> </div> <div className="w-16 h-6 bg-gray-200 rounded animate-pulse" /> </div> ))} </div> }> {paginatedFlights.data && ( <div className="space-y-2"> {paginatedFlights.data.map((flight) => ( <div key={flight.id} className="flex justify-between items-center p-3 border rounded hover:bg-gray-50"> <div className="flex items-center space-x-4"> <span className="font-mono text-sm font-medium">{flight.id}</span> <span className="text-sm">{flight.origin} → {flight.destination}</span> <span className="text-sm text-gray-500">{flight.departure}</span> </div> <div className="flex items-center space-x-2"> <span className={`px-2 py-1 rounded text-xs font-medium ${ flight.status === 'On Time' ? 'bg-green-100 text-green-800' : flight.status === 'Delayed' ? 'bg-orange-100 text-orange-800' : 'bg-blue-100 text-blue-800' }`}> {flight.status} </span> {flight.delay > 0 && ( <span className="text-xs text-orange-600">+{flight.delay}m</span> )} </div> </div> ))} </div> )} </LoadingState> {/* Pagination */} {paginatedFlights.totalPages > 1 && ( <div className="flex justify-between items-center mt-6 pt-4 border-t"> <p className="text-sm text-gray-500"> Page {paginatedFlights.currentPage} of {paginatedFlights.totalPages} </p> <div className="flex gap-2"> <button onClick={paginatedFlights.previousPage} disabled={!paginatedFlights.hasPreviousPage} className="px-3 py-1 text-sm border rounded disabled:opacity-50" > Previous </button> <button onClick={paginatedFlights.nextPage} disabled={!paginatedFlights.hasNextPage} className="px-3 py-1 text-sm border rounded disabled:opacity-50" > Next </button> </div> </div> )} </div> </ComponentErrorBoundary> </div> </ResponsiveContainer> ); }; // Reusable stat card component interface StatCardProps { icon: React.ReactNode; title: string; value: string | number; color: 'blue' | 'green' | 'orange' | 'red' | 'purple'; } const StatCard: React.FC<StatCardProps> = ({ icon, title, value, color }) => { const colorClasses = { blue: 'text-va-blue bg-va-blue/10', green: 'text-va-green bg-va-green/10', orange: 'text-va-amber bg-va-amber/10', red: 'text-va-red bg-va-red/10', purple: 'text-va-purple bg-va-purple/10' }; return ( <div className="bg-white rounded-lg p-4 border"> <div className={`w-10 h-10 rounded-lg flex items-center justify-center mb-3 ${colorClasses[color]}`}> {icon} </div> <p className="text-sm text-gray-500 mb-1">{title}</p> <p className="text-2xl font-bold text-gray-900">{value}</p> </div> ); }; export default EnhancedFlightDashboard; 