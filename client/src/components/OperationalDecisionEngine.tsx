import React, { useState, useEffect } from 'react'; import { AlertTriangle, Clock, DollarSign, Users, Plane, MapPin, TrendingUp, Brain, Gauge, Zap } from 'lucide-react'; import { useSelectedFlight } from '../lib/stores/useSelectedFlight'; import { useScenario } from '../lib/stores/useScenario'; import { AircraftPerformanceCalculator, EMERGENCY_SCENARIOS, BOEING_787_SPECS, AIRBUS_A350_SPECS, AIRBUS_A330_SPECS } from '../lib/aircraftPerformance'; interface FlightOperationalData { callsign: string; aircraft: string; route: string; currentPosition: { lat: number; lon: number }; altitude: number; speed: number; fuelRemaining: number; fuelBurn: number; weather: string; eta: string; passengers: number; maximumRange: number; currentWeight: number; } interface AirfieldOperationalData { icao: string; name: string; distance: number; bearing: number; fuelRequired: number; coordinates: { lat: number; lon: number }; // Weather & Operations weatherCategory: 'CAT1' | 'CAT2' | 'CAT3A' | 'CAT3B' | 'BELOW_MINS'; currentWeather: { visibility: number; // meters ceiling: number; // feet winds: { speed: number; direction: number; gusts?: number }; precipitation: string; rvr?: number; // runway visual range }; // Ground Support groundHandling: { available: boolean; provider: string; services: string[]; operatingHours: string; availability24h: boolean; }; // Customs & Immigration customs: { available: boolean; operatingHours: string; availability24h: boolean; fastTrack: boolean; medicalClearance: boolean; }; // Fire & Rescue fireRescue: { category: number; // ICAO Cat 1-10 foamCapability: boolean; responseTime: number; // seconds availability24h: boolean; medicalEvacuation: boolean; }; // Airport Operations operations: { operatingHours: string; availability24h: boolean; slots: { available: boolean; nextAvailable: string; restrictions: string[]; }; fuelAvailability: { jetA1: boolean; jetA: boolean; quantity: number; // tonnes supplier: string; }; }; // Medical Facilities medical: { onSiteFacilities: boolean; nearbyHospitals: Array<{ name: string; distance: number; // km specialties: string[]; trauma: boolean; helicopter: boolean; }>; }; // Operational Suitability suitability: { score: number; // 0-100 factors: { weather: number; facilities: number; cost: number; time: number; safety: number; }; restrictions: string[]; advantages: string[]; }; } interface OperationalDecision { id: string; type: 'diversion' | 'delay' | 'fuel' | 'weather' | 'medical' | 'technical'; priority: 'low' | 'medium' | 'high' | 'critical'; title: string; description: string; // Enhanced Impact Analysis impact: { cost: { fuel: number; handling: number; passenger: number; crew: number; total: number; }; time: { delay: number; diversion: number; recovery: number; total: number; }; fuel: { additional: number; remaining: number; percentage: number; }; passengers: { affected: number; compensation: number; rebooking: number; }; operations: { slotLoss: boolean; downstream: number; recovery: string; }; }; recommendations: string[]; timeline: string; approval_required: string[]; alternativeOptions: string[]; // Risk Assessment riskAssessment: { safety: 'low' | 'medium' | 'high' | 'critical'; operational: 'low' | 'medium' | 'high' | 'critical'; financial: 'low' | 'medium' | 'high' | 'critical'; reputation: 'low' | 'medium' | 'high' | 'critical'; overall: 'low' | 'medium' | 'high' | 'critical'; }; } export default function OperationalDecisionEngine() { const [activeDecisions, setActiveDecisions] = useState<OperationalDecision[]>([]); const [flightData, setFlightData] = useState<FlightOperationalData | null>(null); const [availableAirfields, setAvailableAirfields] = useState<AirfieldOperationalData[]>([]); const [systemStatus, setSystemStatus] = useState('analyzing'); const [manualScenario, setManualScenario] = useState<string | null>(null); const [performanceData, setPerformanceData] = useState<any>(null); const [selectedAirfield, setSelectedAirfield] = useState<string | null>(null); const { selectedFlight } = useSelectedFlight(); const { startScenario, stopScenario } = useScenario(); // Convert selected flight to operational data format useEffect(() => { if (selectedFlight) { const aircraftType = detectAircraftType(selectedFlight.aircraft); const estimatedWeight = aircraftType === 'A350' ? 280000 : aircraftType === 'A330' ? 242000 : 254000; // kg const currentFuelKg = Math.round(estimatedWeight * 0.35); // Estimate 35% fuel remaining const fuelBurnRate = aircraftType === 'A350' ? 6800 : aircraftType === 'A330' ? 7200 : 6900; // kg/hr const maxRange = aircraftType === 'A350' ? 15300 : aircraftType === 'A330' ? 13400 : 14800; // km setFlightData({ callsign: selectedFlight.callsign, aircraft: selectedFlight.aircraft, route: `${selectedFlight.origin} â†’ ${selectedFlight.destination}`, currentPosition: { lat: selectedFlight.latitude, lon: selectedFlight.longitude }, altitude: selectedFlight.altitude, speed: selectedFlight.velocity, fuelRemaining: currentFuelKg, fuelBurn: fuelBurnRate, weather: 'Fair', eta: '14:25 UTC', passengers: selectedFlight.callsign.includes('401') ? 298 : 245, maximumRange: maxRange, currentWeight: estimatedWeight }); } else { setFlightData(null); } }, [selectedFlight]); // Generate decisions when flight data changes useEffect(() => { if (flightData) { generateOperationalDecisions(flightData); generateAvailableAirfields(flightData); updatePerformanceCalculations(flightData); } else { setActiveDecisions([]); setAvailableAirfields([]); setPerformanceData(null); } }, [flightData, manualScenario]); const detectAircraftType = (aircraft: string): 'A350' | 'A330' | '787' => { const aircraftUpper = aircraft.toUpperCase(); if (aircraftUpper.includes('A350') || aircraftUpper.includes('350')) { return 'A350'; } else if (aircraftUpper.includes('A330') || aircraftUpper.includes('330')) { return 'A330'; } return '787'; // Default to 787 for most wide-body operations }; const updatePerformanceCalculations = (flight: FlightOperationalData) => { const scenarioType = manualScenario || 'normal'; const aircraftType = detectAircraftType(flight.aircraft); // Select appropriate aircraft specifications and calculator let specs = BOEING_787_SPECS; if (aircraftType === 'A350') { specs = AIRBUS_A350_SPECS; } else if (aircraftType === 'A330') { specs = AIRBUS_A330_SPECS; } const calculator = new AircraftPerformanceCalculator(specs); // Calculate emergency impact on aircraft performance const performanceImpact = calculator.calculateEmergencyImpact( { altitude: flight.altitude, fuelRemaining: specs.maxFuel * (flight.fuelRemaining / 100), // Convert percentage to kg speed: flight.speed }, scenarioType ); // Get scenario impact summary const impactSummary = calculator.getScenarioImpactSummary(scenarioType); setPerformanceData({ ...performanceImpact, ...impactSummary, normalSpecs: specs, detectedAircraftType: aircraftType }); }; const generateAvailableAirfields = (flight: FlightOperationalData) => { const currentTime = new Date(); const hour = currentTime.getHours(); const airfields: AirfieldOperationalData[] = []; // Generate realistic airfield data based on flight position const nearbyAirfields = [ { icao: 'EGLL', name: 'London Heathrow', distance: 180, bearing: 270 }, { icao: 'EHAM', name: 'Amsterdam Schiphol', distance: 220, bearing: 90 }, { icao: 'EDDF', name: 'Frankfurt Main', distance: 380, bearing: 135 }, { icao: 'LFPG', name: 'Paris Charles de Gaulle', distance: 290, bearing: 180 }, { icao: 'ESSA', name: 'Stockholm Arlanda', distance: 450, bearing: 45 } ]; nearbyAirfields.forEach((airport, index) => { const fuelRequired = Math.round(airport.distance * flight.fuelBurn / flight.speed); const isNightTime = hour < 6 || hour > 22; const weatherScore = 75 + Math.random() * 25; // Simulate weather conditions airfields.push({ icao: airport.icao, name: airport.name, distance: airport.distance, bearing: airport.bearing, fuelRequired: fuelRequired, coordinates: { lat: flight.currentPosition.lat + (Math.random() - 0.5) * 10, lon: flight.currentPosition.lon + (Math.random() - 0.5) * 10 }, weatherCategory: weatherScore > 90 ? 'CAT1' : weatherScore > 70 ? 'CAT2' : 'CAT3A', currentWeather: { visibility: Math.round(8000 + Math.random() * 2000), ceiling: Math.round(1000 + Math.random() * 500), winds: { speed: Math.round(5 + Math.random() * 15), direction: Math.round(Math.random() * 360), gusts: Math.random() > 0.7 ? Math.round(20 + Math.random() * 10) : undefined }, precipitation: Math.random() > 0.8 ? 'Light Rain' : 'None', rvr: weatherScore < 80 ? Math.round(800 + Math.random() * 400) : undefined }, groundHandling: { available: true, provider: ['Swissport', 'Menzies', 'dnata', 'Worldwide Flight Services'][index % 4], services: ['Baggage', 'Catering', 'Fuel', 'GPU', 'Pushback', 'De-icing'], operatingHours: airport.icao === 'EGLL' ? '24/7' : '06:00-23:00', availability24h: airport.icao === 'EGLL' || airport.icao === 'EHAM' }, customs: { available: true, operatingHours: isNightTime ? 'On-call' : '06:00-23:00', availability24h: airport.icao === 'EGLL', fastTrack: airport.icao === 'EGLL' || airport.icao === 'EHAM', medicalClearance: true }, fireRescue: { category: airport.icao === 'EGLL' ? 10 : 8 + Math.floor(Math.random() * 2), foamCapability: true, responseTime: 120 + Math.floor(Math.random() * 60), availability24h: true, medicalEvacuation: airport.icao === 'EGLL' || airport.icao === 'EHAM' }, operations: { operatingHours: airport.icao === 'EGLL' ? '24/7' : '06:00-23:00', availability24h: airport.icao === 'EGLL' || airport.icao === 'EHAM', slots: { available: !isNightTime || airport.icao === 'EGLL', nextAvailable: isNightTime ? '06:00+1' : 'Immediate', restrictions: isNightTime ? ['Night ops restricted'] : [] }, fuelAvailability: { jetA1: true, jetA: false, quantity: 500 + Math.floor(Math.random() * 1000), supplier: ['Shell', 'BP', 'Total', 'ExxonMobil'][index % 4] } }, medical: { onSiteFacilities: airport.icao === 'EGLL' || airport.icao === 'EHAM', nearbyHospitals: [ { name: `${airport.name.split(' ')[0]} General Hospital`, distance: 8 + Math.floor(Math.random() * 15), specialties: ['Emergency', 'Cardiology', 'Trauma'], trauma: true, helicopter: airport.icao === 'EGLL' } ] }, suitability: { score: Math.round(60 + Math.random() * 40), factors: { weather: Math.round(weatherScore), facilities: Math.round(70 + Math.random() * 30), cost: Math.round(50 + Math.random() * 40), time: Math.round(80 - (airport.distance / 10)), safety: Math.round(85 + Math.random() * 15) }, restrictions: isNightTime ? ['Limited night operations'] : [], advantages: airport.icao === 'EGLL' ? ['24/7 operations', 'Medical facilities'] : airport.icao === 'EHAM' ? ['Hub operations', 'KLM maintenance'] : ['Full ILS CAT3', 'Emergency services'] } }); }); setAvailableAirfields(airfields); }; const generateOperationalDecisions = (flight: FlightOperationalData) => { const decisions: OperationalDecision[] = []; // Enhanced medical emergency decision with comprehensive impact analysis if (manualScenario === 'medical' || Math.random() > 0.7) { decisions.push({ id: 'medical-diversion', type: 'medical', priority: 'critical', title: 'Medical Emergency - Passenger Requires Immediate Care', description: `${flight.callsign} declares medical emergency. Passenger experiencing cardiac symptoms requiring immediate hospital treatment.`, impact: { cost: { fuel: 15000, handling: 8000, passenger: 18000, crew: 4000, total: 45000 }, time: { delay: 180, diversion: 45, recovery: 120, total: 345 }, fuel: { additional: 2800, remaining: flight.fuelRemaining - 2800, percentage: ((flight.fuelRemaining - 2800) / flight.fuelRemaining) * 100 }, passengers: { affected: 280, compensation: 18000, rebooking: 45 }, operations: { slotLoss: true, downstream: 3, recovery: 'Next day' } }, recommendations: [ 'Identify nearest airport with medical facilities', 'Coordinate with emergency medical services', 'Prepare passenger rebooking options', 'Notify insurance and legal teams', 'Brief crew on emergency procedures' ], timeline: 'IMMEDIATE - 15 minutes to decision', approval_required: ['Captain', 'Dispatch', 'Medical'] }); } // Technical malfunction scenario if (scenarios.technical) { decisions.push({ id: 'technical-assessment', type: 'technical', priority: 'high', title: 'Engine Parameter Monitoring', description: `${flight.callsign} reports engine parameter anomaly. Assess continuation vs. precautionary landing.`, impact: { cost: 25000, delay: 120, fuel: 1500, passengers: 280 }, recommendations: [ 'Contact maintenance control for technical assessment', 'Review MEL procedures for continued flight', 'Identify alternate airports along route', 'Prepare for possible precautionary landing', 'Monitor engine parameters continuously' ], timeline: 'Next 30 minutes', approval_required: ['Captain', 'Maintenance', 'Dispatch'] }); } // Severe weather scenario if (scenarios.weather) { decisions.push({ id: 'weather-diversion', type: 'weather', priority: 'high', title: 'Severe Weather Avoidance', description: `Thunderstorms reported at destination. Consider alternate airports or delay.`, impact: { cost: 18000, delay: 90, fuel: 1200, passengers: 280 }, recommendations: [ 'Monitor destination weather radar', 'Calculate fuel for holding patterns', 'Prepare alternate airport options', 'Coordinate with ATC for routing around weather', 'Brief passengers on potential delays' ], timeline: 'Next 45 minutes', approval_required: ['Captain', 'Dispatch', 'ATC'] }); } // Security scenario if (scenarios.security) { decisions.push({ id: 'security-assessment', type: 'medical', // Using medical type for security priority: 'critical', title: 'Security Incident Assessment', description: `${flight.callsign} reports disruptive passenger. Assess threat level and response.`, impact: { cost: 35000, delay: 150, fuel: 2000, passengers: 280 }, recommendations: [ 'Assess passenger threat level with cabin crew', 'Consider restraint procedures if necessary', 'Prepare for possible diversion to nearest airport', 'Coordinate with law enforcement at destination', 'Document incident for regulatory reporting' ], timeline: 'IMMEDIATE - Ongoing assessment', approval_required: ['Captain', 'Cabin Crew', 'Security'] }); } // Normal operations - fuel optimization if (scenarios.normal && flight.altitude > 11000) { decisions.push({ id: 'fuel-optimization', type: 'fuel', priority: 'medium', title: 'Fuel Optimization Opportunity', description: `${flight.callsign} at cruise altitude. Monitor for fuel efficiency improvements.`, impact: { cost: -1200, delay: 0, fuel: -350, passengers: 0 }, recommendations: [ 'Request FL390 step climb when traffic permits', 'Monitor fuel burn rate vs. planned consumption', 'Coordinate with dispatch for route optimization' ], timeline: 'Next 15 minutes', approval_required: ['ATC', 'Dispatch'] }); } // Route efficiency for Mediterranean flights if (lat > 35 && lat < 45 && lon > 15 && lon < 30) { decisions.push({ id: 'mediterranean-routing', type: 'fuel', priority: 'medium', title: 'Mediterranean Route Optimization', description: 'Aircraft over Mediterranean. Monitor for direct routing opportunities.', impact: { cost: -600, delay: -5, fuel: -180, passengers: 0 }, recommendations: [ 'Request direct routing to next waypoint', 'Monitor other traffic for conflicts', 'Coordinate with European ATC centers' ], timeline: 'Next 20 minutes', approval_required: ['European ATC'] }); } setActiveDecisions(decisions); setSystemStatus(decisions.some(d => d.priority === 'critical') ? 'critical' : 'active'); }; const detectNonNormalScenarios = (flight: FlightOperationalData, lat: number, lon: number, currentTime: number) => { const scenarios = { medical: false, technical: false, weather: false, security: false, normal: true }; // Manual scenario override if (manualScenario) { scenarios[manualScenario as keyof typeof scenarios] = true; scenarios.normal = false; return scenarios; } // Time-based automatic scenarios for demonstration if (currentTime >= 12 && currentTime <= 14) { scenarios.medical = true; scenarios.normal = false; } else if (currentTime >= 14 && currentTime <= 16) { scenarios.weather = true; scenarios.normal = false; } else if (currentTime >= 8 && currentTime <= 10) { scenarios.technical = true; scenarios.normal = false; } else if (currentTime >= 18 && currentTime <= 20) { scenarios.security = true; scenarios.normal = false; } return scenarios; }; const triggerScenario = (scenarioType: string) => { setManualScenario(scenarioType); // Create a scenario for the scenario store const scenario = { id: `manual-${scenarioType}`, title: scenarioType === 'medical' ? 'Medical Emergency Response' : scenarioType === 'technical' ? 'Engine Failure in Cruise' : scenarioType === 'weather' ? 'Severe Weather Avoidance' : scenarioType === 'security' ? 'Security Incident Response' : 'Operational Scenario', description: `Manual ${scenarioType} scenario triggered for operational decision support`, type: scenarioType as 'medical' | 'technical' | 'weather' | 'security', severity: 'high' as 'low' | 'medium' | 'high', estimatedDuration: '30 minutes', learningObjectives: [`Manage ${scenarioType} situation effectively`], emergencyDetails: scenarioType === 'medical' ? { type: 'cardiac', severity: 'high', symptoms: ['chest pain', 'difficulty breathing'], immediateActions: ['oxygen', 'position patient', 'prepare for diversion'], diversionRequired: true, timeToStabilize: 30, medicalEquipmentNeeded: ['AED', 'oxygen'], passengerAge: 58, passengerCondition: 'critical' } : undefined, decisionPoints: [], successCriteria: [`Successfully resolve ${scenarioType} scenario`] }; startScenario(scenario); if (flightData) { // Re-generate decisions with the manual scenario const flight = { ...flightData, callsign: flightData.callsign, latitude: flightData.currentPosition.lat, longitude: flightData.currentPosition.lon, altitude: flightData.altitude }; generateOperationalDecisions(flight); } }; const clearScenario = () => { setManualScenario(null); stopScenario(); if (flightData) { const flight = { ...flightData, callsign: flightData.callsign, latitude: flightData.currentPosition.lat, longitude: flightData.currentPosition.lon, altitude: flightData.altitude }; generateOperationalDecisions(flight); } }; const getPriorityColor = (priority: string) => { switch (priority) { case 'critical': return 'bg-red-500'; case 'high': return 'bg-orange-500'; case 'medium': return 'bg-yellow-500'; case 'low': return 'bg-green-500'; default: return 'bg-gray-500'; } }; const getTypeIcon = (type: string) => { switch (type) { case 'fuel': return <TrendingUp className="h-4 w-4" />; case 'weather': return <AlertTriangle className="h-4 w-4" />; case 'diversion': return <MapPin className="h-4 w-4" />; case 'medical': return <Users className="h-4 w-4" />; default: return <Plane className="h-4 w-4" />; } }; return ( <div className="bg-white/90 shadow-sm rounded-lg border border-gray-700 p-6 h-full"> {/* Header */} <div className="flex items-center justify-between mb-6"> <div className="flex items-center gap-3"> <Brain className="h-6 w-6 text-blue-400" /> <h2 className="text-xl font-bold text-gray-900">Operational Decision Engine</h2> <div className={`px-2 py-1 rounded text-xs ${systemStatus === 'active' ? 'bg-green-600' : 'bg-yellow-600'} text-gray-900`}> {systemStatus.toUpperCase()} </div> </div> <div className="text-sm text-gray-400"> Real-time Analysis â€¢ {new Date().toLocaleTimeString()} </div> </div> {/* Current Flight Context */} {flightData && ( <div className="bg-gray-800/50 rounded-lg border border-gray-600 p-4 mb-6"> <div className="flex items-center justify-between mb-3"> <div className="flex items-center gap-3"> <Plane className="h-5 w-5 text-blue-400" /> <span className="text-gray-900 font-medium">{flightData.callsign}</span> <span className="text-gray-400">â€¢</span> <span className="text-gray-300">{flightData.aircraft}</span> </div> <div className="text-sm text-gray-400"> {flightData.route} </div> </div> <div className="grid grid-cols-4 gap-4 text-sm"> <div> <div className="text-gray-400">Position</div> <div className="text-gray-900">{flightData.currentPosition.lat.toFixed(2)}Â°, {flightData.currentPosition.lon.toFixed(2)}Â°</div> </div> <div> <div className="text-gray-400">Altitude/Speed</div> <div className="text-gray-900">{Math.round(flightData.altitude)}ft / {Math.round(flightData.speed)}kts</div> </div> <div> <div className="text-gray-400">Fuel Remaining</div> <div className="text-gray-900">{flightData.fuelRemaining}%</div> </div> <div> <div className="text-gray-400">ETA</div> <div className="text-gray-900">{flightData.eta}</div> </div> </div> </div> )} {/* Scenario Triggers */} <div className="bg-gray-800/50 rounded-lg border border-gray-600 p-4 mb-6"> <div className="flex items-center justify-between mb-3"> <h3 className="text-lg font-semibold text-gray-900">Scenario Testing</h3> {manualScenario && ( <button onClick={clearScenario} className="bg-gray-600 text-gray-900 px-3 py-1 rounded text-sm hover:bg-gray-700" > Clear Active Scenario </button> )} </div> <div className="grid grid-cols-2 md:grid-cols-4 gap-3"> <button onClick={() => triggerScenario('medical')} className={`p-3 rounded text-sm font-medium transition-colors ${ manualScenario === 'medical' ? 'bg-red-600 text-gray-900' : 'bg-red-600/20 border border-red-500 text-red-400 hover:bg-red-600/30' }`} > Medical Emergency </button> <button onClick={() => triggerScenario('technical')} className={`p-3 rounded text-sm font-medium transition-colors ${ manualScenario === 'technical' ? 'bg-orange-600 text-gray-900' : 'bg-orange-600/20 border border-orange-500 text-orange-400 hover:bg-orange-600/30' }`} > Technical Issue </button> <button onClick={() => triggerScenario('weather')} className={`p-3 rounded text-sm font-medium transition-colors ${ manualScenario === 'weather' ? 'bg-yellow-600 text-gray-900' : 'bg-yellow-600/20 border border-yellow-500 text-va-red-primary hover:bg-yellow-600/30' }`} > Severe Weather </button> <button onClick={() => triggerScenario('security')} className={`p-3 rounded text-sm font-medium transition-colors ${ manualScenario === 'security' ? 'bg-purple-600 text-gray-900' : 'bg-purple-600/20 border border-purple-500 text-purple-400 hover:bg-purple-600/30' }`} > Security Incident </button> </div> {manualScenario && ( <div className="mt-3 text-sm text-va-red-primary"> Active Scenario: {manualScenario.charAt(0).toUpperCase() + manualScenario.slice(1)} - Decision recommendations updated </div> )} </div> {/* Boeing 787 Performance Impact */} {performanceData && flightData && ( <div className="bg-gray-800/50 rounded-lg border border-gray-600 p-4 mb-6"> <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2"> <Gauge className="h-5 w-5 text-blue-400" /> {performanceData.aircraftType || 'Aircraft'} Performance Impact Analysis </h3> <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-4"> {/* Fuel Consumption Impact */} <div className="bg-gray-700/50 rounded-lg p-4"> <h4 className="text-md font-medium text-gray-900 mb-3 flex items-center gap-2"> <Zap className="h-4 w-4 text-va-red-primary" /> Fuel Consumption Impact </h4> <div className="space-y-3 text-sm"> <div className="flex justify-between"> <span className="text-gray-400">Normal Burn Rate:</span> <span className="text-gray-900 font-medium">{performanceData.normalSpecs.normalCruiseBurn} kg/hr</span> </div> <div className="flex justify-between"> <span className="text-gray-400">Current Burn Rate:</span> <span className="text-red-400 font-medium">{Math.round(performanceData.fuelBurnRate)} kg/hr</span> </div> <div className="flex justify-between"> <span className="text-gray-400">Increase:</span> <span className="text-red-400 font-medium"> +{Math.round(performanceData.fuelBurnRate - performanceData.normalSpecs.normalCruiseBurn)} kg/hr ({performanceData.fuelIncreasePercent.toFixed(1)}%) </span> </div> {performanceData.efficiencyBonus && performanceData.efficiencyBonus > 0 && ( <div className="flex justify-between"> <span className="text-gray-400"> {performanceData.detectedAircraftType === 'A350' ? 'Fly-by-Wire Efficiency:' : performanceData.detectedAircraftType === 'A330' ? 'Neo Engine Efficiency:' : 'Efficiency Bonus:'} </span> <span className="text-green-600 font-medium">-{performanceData.efficiencyBonus} kg saved</span> </div> )} {performanceData.conventionalPenalty && performanceData.conventionalPenalty > 0 && ( <div className="flex justify-between"> <span className="text-gray-400">Conventional Controls:</span> <span className="text-orange-400 font-medium">+{performanceData.conventionalPenalty} kg penalty</span> </div> )} </div> </div> {/* Range Impact */} <div className="bg-gray-700/50 rounded-lg p-4"> <h4 className="text-md font-medium text-gray-900 mb-3 flex items-center gap-2"> <MapPin className="h-4 w-4 text-green-600" /> Range Impact </h4> <div className="space-y-3 text-sm"> <div className="flex justify-between"> <span className="text-gray-400">Normal Max Range:</span> <span className="text-gray-900 font-medium">{performanceData.normalSpecs.maxRange} nm</span> </div> <div className="flex justify-between"> <span className="text-gray-400">Current Range:</span> <span className="text-red-400 font-medium">{performanceData.range} nm</span> </div> <div className="flex justify-between"> <span className="text-gray-400">Range Reduction:</span> <span className="text-red-400 font-medium"> -{performanceData.rangeReduction} nm ({((performanceData.rangeReduction / performanceData.normalSpecs.maxRange) * 100).toFixed(1)}%) </span> </div> </div> </div> </div> {/* Operational Recommendations */} <div className="bg-gray-700/50 rounded-lg p-4"> <h4 className="text-md font-medium text-gray-900 mb-3">Emergency Impact Analysis</h4> <p className="text-gray-300 text-sm mb-3">{performanceData.scenario.description}</p> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div> <div className="text-xs text-gray-400 mb-2">Flight Parameters</div> <div className="space-y-1 text-sm"> <div className="flex justify-between"> <span className="text-gray-400">Current Altitude:</span> <span className="text-gray-900">{performanceData.altitude.toLocaleString()} ft</span> </div> <div className="flex justify-between"> <span className="text-gray-400">Current Speed:</span> <span className="text-gray-900">{performanceData.speed} kts</span> </div> <div className="flex justify-between"> <span className="text-gray-400">Time Remaining:</span> <span className="text-gray-900">{performanceData.timeRemaining.toFixed(1)} hrs</span> </div> </div> </div> <div> <div className="text-xs text-gray-400 mb-2">Emergency Status</div> <div className="space-y-1 text-sm"> <div className={`font-medium ${ performanceData.scenario.diversionRequired ? 'text-red-400' : 'text-va-red-primary' }`}> {performanceData.scenario.diversionRequired ? 'DIVERSION REQUIRED' : 'CONTINUE MONITORING'} </div> <div className="text-gray-300"> Stabilize Time: {performanceData.scenario.timeToStabilize} min </div> </div> </div> </div> </div> </div> )} {/* Active Operational Decisions */} <div className="space-y-4"> <h3 className="text-lg font-semibold text-gray-900 mb-4"> Operational Recommendations ({activeDecisions.length}) </h3> {activeDecisions.map((decision) => ( <div key={decision.id} className="bg-gray-800/50 rounded-lg border border-gray-600 p-4"> <div className="flex items-start justify-between mb-3"> <div className="flex items-center gap-3"> {getTypeIcon(decision.type)} <div> <h4 className="text-gray-900 font-medium">{decision.title}</h4> <p className="text-gray-400 text-sm mt-1">{decision.description}</p> </div> </div> <div className={`px-2 py-1 rounded text-xs text-gray-900 ${getPriorityColor(decision.priority)}`}> {decision.priority.toUpperCase()} </div> </div> {/* Impact Analysis */} <div className="grid grid-cols-4 gap-4 mb-4 text-sm"> <div className="bg-gray-700/50 rounded p-2"> <div className="flex items-center gap-1 text-gray-400"> <DollarSign className="h-3 w-3" /> <span>Cost Impact</span> </div> <div className={`font-medium ${decision.impact.cost < 0 ? 'text-green-600' : decision.impact.cost > 0 ? 'text-red-400' : 'text-gray-300'}`}> {decision.impact.cost < 0 ? '-' : ''}${Math.abs(decision.impact.cost)} </div> </div> <div className="bg-gray-700/50 rounded p-2"> <div className="flex items-center gap-1 text-gray-400"> <Clock className="h-3 w-3" /> <span>Delay</span> </div> <div className="text-gray-900 font-medium">{decision.impact.delay} min</div> </div> <div className="bg-gray-700/50 rounded p-2"> <div className="flex items-center gap-1 text-gray-400"> <TrendingUp className="h-3 w-3" /> <span>Fuel</span> </div> <div className={`font-medium ${decision.impact.fuel < 0 ? 'text-green-600' : decision.impact.fuel > 0 ? 'text-red-400' : 'text-gray-300'}`}> {decision.impact.fuel < 0 ? '-' : ''}{Math.abs(decision.impact.fuel)} lbs </div> </div> <div className="bg-gray-700/50 rounded p-2"> <div className="flex items-center gap-1 text-gray-400"> <Users className="h-3 w-3" /> <span>Passengers</span> </div> <div className="text-gray-900 font-medium">{decision.impact.passengers} affected</div> </div> </div> {/* Recommendations */} <div className="mb-4"> <div className="text-sm font-medium text-gray-300 mb-2">Recommendations:</div> <ul className="text-sm text-gray-400 space-y-1"> {decision.recommendations.map((rec, index) => ( <li key={index} className="flex items-start gap-2"> <span className="text-blue-400">â€¢</span> <span>{rec}</span> </li> ))} </ul> </div> {/* Action Timeline and Approvals */} <div className="flex items-center justify-between"> <div className="text-sm"> <span className="text-gray-400">Timeline: </span> <span className="text-gray-900">{decision.timeline}</span> </div> <div className="text-sm"> {decision.approval_required.length > 0 && ( <> <span className="text-gray-400">Requires: </span> <span className="text-va-red-primary">{decision.approval_required.join(', ')}</span> </> )} </div> </div> </div> ))} {!flightData ? ( <div className="text-center py-16 text-gray-400"> <Brain className="h-16 w-16 mx-auto mb-4 opacity-50" /> <p className="text-lg mb-2">No flight selected for analysis</p> <p className="text-sm max-w-md mx-auto"> Select a flight from the satellite map to view operational recommendations and decision support analysis </p> </div> ) : activeDecisions.length === 0 && ( <div className="text-center py-8 text-gray-400"> <Brain className="h-12 w-12 mx-auto mb-3 opacity-50" /> <p>No active operational decisions</p> <p className="text-sm">System monitoring flight operations</p> </div> )} </div> </div> ); }